{
  "version": "3.4",
  "log": [
    {
      "SuperChamps/contracts/Token/KiguMinter.sol:KiguMinter": {
        "src": "SuperChamps/contracts/Token/KiguMinter.sol:7",
        "version": {
          "withMetadata": "672ae1ae238c94d4c76303ba5788ed8197b3d640ead11579445cb9f595b901d4",
          "withoutMetadata": "db1f30b71ab24c562a0cf8ed33a94c0ab93df84e34ba64c592b853d252a3299f",
          "linkedWithoutMetadata": "db1f30b71ab24c562a0cf8ed33a94c0ab93df84e34ba64c592b853d252a3299f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "mintKiguToken()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "KiguMinter",
            "src": "SuperChamps/contracts/Token/KiguMinter.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "kigu",
            "src": "SuperChamps/contracts/Token/KiguMinter.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "emissionContract",
            "src": "SuperChamps/contracts/Token/KiguMinter.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "KiguMinter",
              "src": "SuperChamps/contracts/Token/KiguMinter.sol:14"
            },
            {
              "label": "epochCount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "KiguMinter",
              "src": "SuperChamps/contracts/Token/KiguMinter.sol:15"
            },
            {
              "label": "activePeriod",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "KiguMinter",
              "src": "SuperChamps/contracts/Token/KiguMinter.sol:16"
            },
            {
              "label": "lastEmission",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "KiguMinter",
              "src": "SuperChamps/contracts/Token/KiguMinter.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/IKigu.sol:IKigu": {
        "src": "SuperChamps/interfaces/IKigu.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Token/KiguEmission.sol:KiguEmission": {
        "src": "SuperChamps/contracts/Token/KiguEmission.sol:9",
        "version": {
          "withMetadata": "89e27a2cd8ea76c40380f8d89bc8d3a6045c860dbe5acd8919d11c052924dc38",
          "withoutMetadata": "fbbe77becff1096b1fa80eaf7122cd46bad3e438c47b4d517161c47342ec2a9e",
          "linkedWithoutMetadata": "fbbe77becff1096b1fa80eaf7122cd46bad3e438c47b4d517161c47342ec2a9e"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setMinter(address)",
          "setEmissionManager(address)",
          "setWalletsAndPercents(address[4],uint256[4])",
          "mintTokenAndDistribute()",
          "version()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "KiguEmission",
            "src": "SuperChamps/contracts/Token/KiguEmission.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "kiguToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)225",
              "contract": "KiguEmission",
              "src": "SuperChamps/contracts/Token/KiguEmission.sol:10"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IKiguMinter)543",
              "contract": "KiguEmission",
              "src": "SuperChamps/contracts/Token/KiguEmission.sol:11"
            },
            {
              "label": "wallets",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_address)4_storage",
              "contract": "KiguEmission",
              "src": "SuperChamps/contracts/Token/KiguEmission.sol:13"
            },
            {
              "label": "percents",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_uint256)4_storage",
              "contract": "KiguEmission",
              "src": "SuperChamps/contracts/Token/KiguEmission.sol:14"
            },
            {
              "label": "emissionManager",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "KiguEmission",
              "src": "SuperChamps/contracts/Token/KiguEmission.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)4_storage": {
              "label": "address[4]",
              "numberOfBytes": "128"
            },
            "t_array(t_uint256)4_storage": {
              "label": "uint256[4]",
              "numberOfBytes": "128"
            },
            "t_contract(IERC20)225": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IKiguMinter)543": {
              "label": "contract IKiguMinter",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/IKiguMinter.sol:IKiguMinter": {
        "src": "SuperChamps/interfaces/IKiguMinter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintKiguToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Token/KiguToken.sol:KiguToken": {
        "src": "SuperChamps/contracts/Token/KiguToken.sol:8",
        "version": {
          "withMetadata": "980d81e482c2d04fea5906c52fbfede1457ba100f5753eeb0e547787c5e545c6",
          "withoutMetadata": "7173452a1166197b8d31dd393a327b7de31efaef7bb506d53a646648a33c8f25",
          "linkedWithoutMetadata": "7173452a1166197b8d31dd393a327b7de31efaef7bb506d53a646648a33c8f25"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialMint(address)",
          "mint(address,uint256)",
          "setMinter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "KiguToken",
            "src": "SuperChamps/contracts/Token/KiguToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "KiguToken",
              "src": "SuperChamps/contracts/Token/KiguToken.sol:9"
            },
            {
              "label": "isInitialMintDone",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "KiguToken",
              "src": "SuperChamps/contracts/Token/KiguToken.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/IKigu.sol:IKigu": {
        "src": "SuperChamps/interfaces/IKigu.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "8d26390a9dc0559a06dfb0957747fdf98a6497bbe8b277833892e73b4b97a85c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Arrays.sol:Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:15",
        "version": {
          "withMetadata": "aeeb3c7e8d1c1f24ccec07bdc2934c92de358b5f8106ff57da58561703f0d190",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/SlotDerivation.sol:SlotDerivation",
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Comparators.sol:Comparators",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Comparators.sol:Comparators": {
        "src": "@openzeppelin/contracts/utils/Comparators.sol:11",
        "version": {
          "withMetadata": "01ebc06a890c99b4a6d91c4b23852851e0b52f57ecf67cb0f803a5e10f62103c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Nonces.sol:Nonces": {
        "src": "@openzeppelin/contracts/utils/Nonces.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "b5138e2ff45fc66e546c96db13167afa23474c21d994ab9fae15bcc0ef60b534",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings": {
        "src": "@openzeppelin/contracts/utils/ShortStrings.sol:40",
        "version": {
          "withMetadata": "f8ef6ef035ecc373d4aabb85350114aafcda7479287adc343194bc1c2409ad00",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/SlotDerivation.sol:SlotDerivation": {
        "src": "@openzeppelin/contracts/utils/SlotDerivation.sol:41",
        "version": {
          "withMetadata": "51c037fd6ee0377c11966102df5fee415fdaa52b3a9aa344f029251b4decf9bc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "ce14d4419a039c3f0f1edb20bc29e04cf5b461eddd2e4894cabea7eb8c279716",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "8adef76841d3479039fed28e93a0b8e9da111d93e69f8e190087326ef029f782",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "bd307bd52f051f5828f41549d54fa4ee73203ff3c1f1f2064550abe1bdad83ef",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings",
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:68"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "64c6633592de64edf5f2b65d3a76eebc1df2fb3ad02eeed7d5a19d4cc912032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "d3acf3ab10c417b70445209ca06a61992db7c0df02f8e10f8199ea241b676bff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "f4f761701ba89b32f5ffbee9df726c06ef49dc2a0cb7310dfc36f1028318e329",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "bf96ea0b6ac8f4f8e29cf4e5d8565c6fd28e151699261bbe37712ed2f1dd9b9d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableMap.sol:EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableMap.sol:53",
        "version": {
          "withMetadata": "7d4a4794aeefa9103da89834d368282cd213ded4209f60164b40653741b28959",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:44",
        "version": {
          "withMetadata": "5621dc47a4a9470ab27f1f82122acf4ec7fd0c078e931d01dbc0b77c711da9bf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Arrays.sol:Arrays"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "Gnosis/interfaces/IGnosisSafeProxyFactory.sol:IGnosisSafeProxyFactory": {
        "src": "Gnosis/interfaces/IGnosisSafeProxyFactory.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createProxyWithNonce(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:ISCVirtualAssetEventsFactory": {
        "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permissions_users(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:SCVirtualAssetEvents": {
        "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:10",
        "version": {
          "withMetadata": "db1798260adedd73e4757cd26cc19add26ae95952d756d222eed0df70bce67cd",
          "withoutMetadata": "d7e25eefe2ecda55045488daefe87be03a6d851beebbe4a289b7b0d32459dd8e",
          "linkedWithoutMetadata": "d7e25eefe2ecda55045488daefe87be03a6d851beebbe4a289b7b0d32459dd8e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,string)",
          "EmitGameUserAsset(string,string,int256,string)",
          "EmitGameUserActivity(string,string)",
          "EmitGameUserAssetWithSign(string,string,int256,string,bytes)",
          "EmitGameUserActivityWithSign(string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCVirtualAssetEvents",
            "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_factory",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ISCVirtualAssetEventsFactory)13150",
              "contract": "SCVirtualAssetEvents",
              "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:11"
            },
            {
              "label": "game",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SCVirtualAssetEvents",
              "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:12"
            }
          ],
          "types": {
            "t_contract(ISCVirtualAssetEventsFactory)13150": {
              "label": "contract ISCVirtualAssetEventsFactory",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:SCVirtualAssetEventsFactory": {
        "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:53",
        "version": {
          "withMetadata": "7e2e30f44deee297d63038ad9bfbcbec544c6c3c5ee2e5d18ed2a31f4e5f6635",
          "withoutMetadata": "753e98993878820f7d039ca4ead2cda950aecb8e800fc40c85009ae280ef89db",
          "linkedWithoutMetadata": "753e98993878820f7d039ca4ead2cda950aecb8e800fc40c85009ae280ef89db"
        },
        "inherit": [
          "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:ISCVirtualAssetEventsFactory",
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "permissionUser(address[],bool)",
          "deployGameEvents(string)",
          "games()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCVirtualAssetEventsFactory",
            "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "permissions_users",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SCVirtualAssetEventsFactory",
              "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:54"
            },
            {
              "label": "game_events",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_string_memory_ptr,t_contract(SCVirtualAssetEvents)13142)",
              "contract": "SCVirtualAssetEventsFactory",
              "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:55"
            },
            {
              "label": "_games",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "SCVirtualAssetEventsFactory",
              "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(SCVirtualAssetEvents)13142": {
              "label": "contract SCVirtualAssetEvents",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_contract(SCVirtualAssetEvents)13142)": {
              "label": "mapping(string => contract SCVirtualAssetEvents)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Metagame/SCLock.sol:ISCLockOld": {
        "src": "SuperChamps/contracts/Metagame/SCLock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLockHistory(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Metagame/SCLock.sol:SCLock": {
        "src": "SuperChamps/contracts/Metagame/SCLock.sol:20",
        "version": {
          "withMetadata": "644330af2b57fa4f1ed9ad7d36d630bc52969bf91d81bead3e9316532ed90b8c",
          "withoutMetadata": "99614d67f45bdab43ef39f4df6ea4292a746282b7adabe35dbe645e8bd500b55",
          "linkedWithoutMetadata": "99614d67f45bdab43ef39f4df6ea4292a746282b7adabe35dbe645e8bd500b55"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "lock(uint256,uint256)",
          "extendLock(uint256,uint256)",
          "claim(uint256)",
          "importLocksFromOldContract(address,address[])",
          "hasImportedLocks(address)",
          "getLockHistory(address)",
          "getClaimHistory(address)",
          "getLockHistoryPaginated(address,uint256,uint256)",
          "getClaimHistoryPaginated(address,uint256,uint256)",
          "getClaimable(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCLock",
            "src": "SuperChamps/contracts/Metagame/SCLock.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)1411",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:35"
            },
            {
              "label": "lockHistory",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_array(t_struct(LockEvent)13333_storage)dyn_storage)",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:37"
            },
            {
              "label": "claimHistory",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_array(t_struct(ClaimEvent)13340_storage)dyn_storage)",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:38"
            },
            {
              "label": "isLockImported",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(ClaimEvent)13340_storage)dyn_storage": {
              "label": "struct SCLock.ClaimEvent[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(LockEvent)13333_storage)dyn_storage": {
              "label": "struct SCLock.LockEvent[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1411": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_struct(ClaimEvent)13340_storage)dyn_storage)": {
              "label": "mapping(address => struct SCLock.ClaimEvent[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(LockEvent)13333_storage)dyn_storage)": {
              "label": "mapping(address => struct SCLock.LockEvent[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(ClaimEvent)13340_storage": {
              "label": "struct SCLock.ClaimEvent",
              "members": [
                {
                  "label": "lockId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "claimedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(LockEvent)13333_storage": {
              "label": "struct SCLock.LockEvent",
              "members": [
                {
                  "label": "lockId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isClaimed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Metagame/SCMetagameGenericDataView.sol:SCMetagameGenericDataView": {
        "src": "SuperChamps/contracts/Metagame/SCMetagameGenericDataView.sol:15",
        "version": {
          "withMetadata": "3b7d3ac8cf42fb0da1f6f04425ac11c01b18f6764042be9577b201ee39b3e9a3",
          "withoutMetadata": "7e361cfc5e5fa7e2c0bcfe807e5cf4b3f7196eced0aa74b106fdab25230e0386",
          "linkedWithoutMetadata": "7e361cfc5e5fa7e2c0bcfe807e5cf4b3f7196eced0aa74b106fdab25230e0386"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/ISCMetagameDataSource.sol:ISCMetagameDataSource"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setLocationView(address,string)",
          "getBaseMultiplier(address)",
          "getMultiplier(address,string)",
          "getMembership(address,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMetagameGenericDataView",
            "src": "SuperChamps/contracts/Metagame/SCMetagameGenericDataView.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "metadata_registry",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ISCMetagameRegistry)25189",
              "contract": "SCMetagameGenericDataView",
              "src": "SuperChamps/contracts/Metagame/SCMetagameGenericDataView.sol:19"
            },
            {
              "label": "location_views",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_string_memory_ptr,t_contract(ISCMetagameDataSource)25055)",
              "contract": "SCMetagameGenericDataView",
              "src": "SuperChamps/contracts/Metagame/SCMetagameGenericDataView.sol:22"
            }
          ],
          "types": {
            "t_contract(ISCMetagameDataSource)25055": {
              "label": "contract ISCMetagameDataSource",
              "numberOfBytes": "20"
            },
            "t_contract(ISCMetagameRegistry)25189": {
              "label": "contract ISCMetagameRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_string_memory_ptr,t_contract(ISCMetagameDataSource)25055)": {
              "label": "mapping(string => contract ISCMetagameDataSource)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:SCMetagameLocationRewards": {
        "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:14",
        "version": {
          "withMetadata": "1e2a79ac6b6e439a9128a43a190dfb8aa4bbb0d26a8bff1def630706ccde2bed",
          "withoutMetadata": "6fe4d4598b75158150593eb5883aebe133d5cf2704286b8d25405b82cf01a596",
          "linkedWithoutMetadata": "6fe4d4598b75158150593eb5883aebe133d5cf2704286b8d25405b82cf01a596"
        },
        "inherit": [
          "Synthetix/contracts/StakingRewards.sol:StakingRewards",
          "Synthetix/contracts/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "Synthetix/contracts/RewardsDistributionRecipient.sol:RewardsDistributionRecipient",
          "Synthetix/contracts/Owned.sol:Owned",
          "Synthetix/contracts/interfaces/IStakingRewards.sol:IStakingRewards"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string,address)",
          "updateMultiplier(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMetagameLocationRewards",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metagame_data",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:8"
            },
            {
              "label": "nominatedOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:9"
            },
            {
              "label": "rewardsDistribution",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "RewardsDistributionRecipient",
              "src": "Synthetix/contracts/RewardsDistributionRecipient.sol:11"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "lastPauseTime",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:11"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:12"
            },
            {
              "label": "rewardsToken",
              "offset": 1,
              "slot": "5",
              "type": "t_contract(IERC20)1411",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:18"
            },
            {
              "label": "stakingToken",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)1411",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:19"
            },
            {
              "label": "periodFinish",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:20"
            },
            {
              "label": "rewardRate",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:21"
            },
            {
              "label": "rewardsDuration",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:22"
            },
            {
              "label": "lastUpdateTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:23"
            },
            {
              "label": "rewardPerTokenStored",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:24"
            },
            {
              "label": "userRewardPerTokenPaid",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:26"
            },
            {
              "label": "rewards",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:27"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:30"
            },
            {
              "label": "location_id",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "SCMetagameLocationRewards",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:19"
            },
            {
              "label": "access_pass",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(ISCAccessPass)24946",
              "contract": "SCMetagameLocationRewards",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:22"
            },
            {
              "label": "staked_supply",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "SCMetagameLocationRewards",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:25"
            },
            {
              "label": "user_stakes",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SCMetagameLocationRewards",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:28"
            },
            {
              "label": "_multiplier_basis_points",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SCMetagameLocationRewards",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1411": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(ISCAccessPass)24946": {
              "label": "contract ISCAccessPass",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:SCMetagameLocations": {
        "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:17",
        "version": {
          "withMetadata": "7c9f776d6aac7aa98f8aabe2ad9c8fbe06d5393b0bb1b66df046f31e8435aa3d",
          "withoutMetadata": "834ea5d08c93ab8032fc3ecae2c94003f9c21440f8dc1915b1c3d67d642322b8",
          "linkedWithoutMetadata": "834ea5d08c93ab8032fc3ecae2c94003f9c21440f8dc1915b1c3d67d642322b8"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/ISCMetagameDataSource.sol:ISCMetagameDataSource"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "setTreasury(address)",
          "setDataView(address)",
          "addLocation(string)",
          "getLocationRewardsStaker(string)",
          "distributeRewards(uint256,string[],uint256[])",
          "recoverERC20(address,uint256)",
          "recoverERC20FromLocation(string,address,uint256)",
          "setEpochDuration(uint256)",
          "locationCount()",
          "getMultiplier(address,string)",
          "getMembership(address,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMetagameLocations",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:61"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metadata",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "EPOCH",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "current_epoch",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "next_epoch",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "data_view",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ISCMetagameDataSource)25055",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:26"
            },
            {
              "label": "access_pass",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(ISCAccessPass)24946",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:29"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:33"
            },
            {
              "label": "EPOCH",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:36"
            },
            {
              "label": "location_rewards",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_string_memory_ptr,t_contract(SCMetagameLocationRewards)14598)",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:39"
            },
            {
              "label": "locations",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:42"
            },
            {
              "label": "award_tiers_bps",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:46"
            },
            {
              "label": "current_epoch",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:49"
            },
            {
              "label": "next_epoch",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(ISCAccessPass)24946": {
              "label": "contract ISCAccessPass",
              "numberOfBytes": "20"
            },
            "t_contract(ISCMetagameDataSource)25055": {
              "label": "contract ISCMetagameDataSource",
              "numberOfBytes": "20"
            },
            "t_contract(SCMetagameLocationRewards)14598": {
              "label": "contract SCMetagameLocationRewards",
              "numberOfBytes": "20"
            },
            "t_mapping(t_string_memory_ptr,t_contract(SCMetagameLocationRewards)14598)": {
              "label": "mapping(string => contract SCMetagameLocationRewards)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Metagame/SCMetagamePool.sol:SCMetagamePool": {
        "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:15",
        "version": {
          "withMetadata": "766eaec8ef000caa612bfcb3ac7a26f95d5f1f2eae5eb3353dad008f55a8ca88",
          "withoutMetadata": "bb840da878d398b142fa4a93033192f7d1c8b1d5ddb47405bb86fd592223c619",
          "linkedWithoutMetadata": "bb840da878d398b142fa4a93033192f7d1c8b1d5ddb47405bb86fd592223c619"
        },
        "inherit": [
          "SuperChamps/interfaces/ISCMetagamePool.sol:ISCMetagamePool",
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "stake(uint256)",
          "stakeFor(address,uint256)",
          "approve(address,uint256)",
          "spend(uint256,address,address,string)",
          "unstake(uint256)",
          "checkpoint_timestamps(address)",
          "checkpoint_timestamps_range(address,uint256,uint256)",
          "checkpoints(address,uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMetagamePool",
            "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_user_to_checkpoint_to_data",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(StakingData)15155_storage))",
              "contract": "SCMetagamePool",
              "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:24"
            },
            {
              "label": "_user_checkpoints",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "SCMetagamePool",
              "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:25"
            },
            {
              "label": "_user_to_approved_spend",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "SCMetagamePool",
              "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(StakingData)15155_storage))": {
              "label": "mapping(address => mapping(uint256 => struct SCMetagamePool.StakingData))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingData)15155_storage)": {
              "label": "mapping(uint256 => struct SCMetagamePool.StakingData)",
              "numberOfBytes": "32"
            },
            "t_struct(StakingData)15155_storage": {
              "label": "struct SCMetagamePool.StakingData",
              "members": [
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "msg_sender",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:SCMetagameRegistry": {
        "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:15",
        "version": {
          "withMetadata": "cb19708fbda43479f0d2fc5039e1de7818e0acbc0feb665a599b590d4398df93",
          "withoutMetadata": "eee13994776923e492b565e949c948cbc6185b8ffa37c1b6b7fd411c3bca22c9",
          "linkedWithoutMetadata": "eee13994776923e492b565e949c948cbc6185b8ffa37c1b6b7fd411c3bca22c9"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/ISCMetagameRegistry.sol:ISCMetagameRegistry"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "hashMessage(string,address,string,string,uint256,uint256)",
          "metadataFromAddress(address,string)",
          "metadataFromUserID(string,string)",
          "addressToUserID(address)",
          "registerUserInfo(string,address,string,string,uint256,uint256,bytes)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMetagameRegistry",
            "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "address_to_uid_hash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "SCMetagameRegistry",
              "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:17"
            },
            {
              "label": "uid_hash_to_user_id",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "SCMetagameRegistry",
              "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:20"
            },
            {
              "label": "metadata",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))",
              "contract": "SCMetagameRegistry",
              "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:23"
            },
            {
              "label": "consumed_signatures",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
              "contract": "SCMetagameRegistry",
              "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:27"
            },
            {
              "label": "uid_hash_last_nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_string_memory_ptr,t_uint256)",
              "contract": "SCMetagameRegistry",
              "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_memory_ptr": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))": {
              "label": "mapping(bytes32 => mapping(string => string))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes_memory_ptr,t_bool)": {
              "label": "mapping(bytes => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_string_storage)": {
              "label": "mapping(string => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_uint256)": {
              "label": "mapping(string => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/NFTs/SCAccessPass.sol:SCAccessPass": {
        "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:16",
        "version": {
          "withMetadata": "4faccd955af33678a48725e9d8bfac626a9f4138b03b3d3c8c2fa3b3e13480b7",
          "withoutMetadata": "ee518be705d171bf039a80f5a7da4003afec0275b347539e5166df4b0a7ae4b3",
          "linkedWithoutMetadata": "ee518be705d171bf039a80f5a7da4003afec0275b347539e5166df4b0a7ae4b3"
        },
        "inherit": [
          "SuperChamps/interfaces/ISCAccessPass.sol:ISCAccessPass",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,string,string,string)",
          "getLevel(address)",
          "getLevel(uint256)",
          "setRenderer(address)",
          "setPrice(uint256,uint256)",
          "collect(address payable)",
          "verifyPassHolder(address,bool)",
          "register()",
          "freeRegister(address)",
          "upgrade()",
          "freeUpgrade(address)",
          "burnToken(address)",
          "isPassHolder(address)",
          "isVerified(address)",
          "transferFrom(address,address,uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCAccessPass",
            "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:49"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_permissions",
            "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upgrade_prices",
            "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_tokenIdCounter",
            "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_renderer",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC721MetadataRenderer)24827",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:18"
            },
            {
              "label": "_passholder_id",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:24"
            },
            {
              "label": "_verified",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:27"
            },
            {
              "label": "_pass_level",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:30"
            },
            {
              "label": "upgrade_prices",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:33"
            },
            {
              "label": "_tokenIdCounter",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC721MetadataRenderer)24827": {
              "label": "contract IERC721MetadataRenderer",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:SCAccessPassRenderer": {
        "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:14",
        "version": {
          "withMetadata": "1c0e5e66de2c2ff85ab579eb4fe0c109d0d2085f2a3240921b8b171c40d4df9b",
          "withoutMetadata": "695168a2cea942be16176cd79597537053940fc2a570b739b237d99b40dccfd9",
          "linkedWithoutMetadata": "695168a2cea942be16176cd79597537053940fc2a570b739b237d99b40dccfd9"
        },
        "inherit": [
          "SuperChamps/interfaces/IERC721MetadataRenderer.sol:IERC721MetadataRenderer"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(address,address,string,string,string)",
          "setURI(string,bool)",
          "setAccessPass(address)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "tokenURI(uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCAccessPassRenderer",
            "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_permissions",
            "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_access_pass",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ISCAccessPass)24946",
              "contract": "SCAccessPassRenderer",
              "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:21"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SCAccessPassRenderer",
              "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "SCAccessPassRenderer",
              "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "SCAccessPassRenderer",
              "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:30"
            },
            {
              "label": "_concatenate_ids",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "SCAccessPassRenderer",
              "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:33"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISCAccessPass)24946": {
              "label": "contract ISCAccessPass",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:SCGenericRenderer": {
        "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:13",
        "version": {
          "withMetadata": "8925cb474f74fc6b68de2ae4cbd13857b1d74d9bdbdff6668f012e5d4ded85bb",
          "withoutMetadata": "7e3eb936c2f7e94753e45634fec928c59e5364483f9c6a617d73e01c093dc039",
          "linkedWithoutMetadata": "7e3eb936c2f7e94753e45634fec928c59e5364483f9c6a617d73e01c093dc039"
        },
        "inherit": [
          "SuperChamps/interfaces/IERC721MetadataRenderer.sol:IERC721MetadataRenderer"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(address,string,string,string)",
          "setURI(string,bool)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "tokenURI(uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCGenericRenderer",
            "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:40"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_permissions",
            "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_concatenate_ids",
            "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "SCGenericRenderer",
              "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:20"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SCGenericRenderer",
              "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:23"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "SCGenericRenderer",
              "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:26"
            },
            {
              "label": "_concatenate_ids",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "SCGenericRenderer",
              "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:29"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:SCTempLockedNFT": {
        "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:18",
        "version": {
          "withMetadata": "e0cfc0fb0cd3b6e42601f6d7f28e3780c6c2f5cfa0bb01308ca442b404b23649",
          "withoutMetadata": "1c53b8cb2ae5150a623de4192c63fdc6fea81fbd788c710c269b80ec7f416d8b",
          "linkedWithoutMetadata": "1c53b8cb2ae5150a623de4192c63fdc6fea81fbd788c710c269b80ec7f416d8b"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,string,address)",
          "setRenderer(address)",
          "mintTo(address,uint256,uint96,uint96,uint64)",
          "transferFrom(address,address,uint256)",
          "extendExpiry(uint256,uint64)",
          "cleanup(uint256[])",
          "unlockTokens(uint256[])",
          "unlockTokenGroup(uint128)",
          "unlockTokenSpecies(uint128,uint128)",
          "unlockCollection(bool)",
          "isUnlocked(uint256)",
          "recoverERC20(address,uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCTempLockedNFT",
            "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "champ_token",
            "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_renderer",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC721MetadataRenderer)24827",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:26"
            },
            {
              "label": "_token_data",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(TokenData)17109_storage)",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:32"
            },
            {
              "label": "_unlocked_tokens",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:35"
            },
            {
              "label": "_unlocked_species",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:38"
            },
            {
              "label": "_unlocked_groups",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint128,t_bool)",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:41"
            },
            {
              "label": "_all_unlocked",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC721MetadataRenderer)24827": {
              "label": "contract IERC721MetadataRenderer",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bool)": {
              "label": "mapping(uint128 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenData)17109_storage)": {
              "label": "mapping(uint256 => struct SCTempLockedNFT.TokenData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenData)17109_storage": {
              "label": "struct SCTempLockedNFT.TokenData",
              "members": [
                {
                  "label": "group",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "species",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:GenesisNFTStaking": {
        "src": "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:16",
        "version": {
          "withMetadata": "e179dfcb598e8cee275f035e5b8c90177fd4d23174c637f13c82f351d1f6a8c0",
          "withoutMetadata": "15c2f9f582c5d544ad2a47b67d4339a12304995f2bd0937c280245409d17ac7f",
          "linkedWithoutMetadata": "15c2f9f582c5d544ad2a47b67d4339a12304995f2bd0937c280245409d17ac7f"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "(address)",
          "supportsInterface(bytes4)",
          "deposit(uint256[])",
          "withdraw(uint256[])",
          "StakedTokens(address)",
          "TokenData(uint256[])",
          "onERC721Received(address,address,uint256,bytes)",
          "underlying()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenesisNFTStaking",
            "src": "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_underlying",
            "src": "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "staking_data",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(StakingData)17686_storage)",
              "contract": "GenesisNFTStaking",
              "src": "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:26"
            },
            {
              "label": "staked_tokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)12833_storage)",
              "contract": "GenesisNFTStaking",
              "src": "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)12833_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingData)17686_storage)": {
              "label": "mapping(uint256 => struct GenesisNFTStaking.StakingData)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)12292_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StakingData)17686_storage": {
              "label": "struct GenesisNFTStaking.StakingData",
              "members": [
                {
                  "label": "last_staked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "last_unstaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "last_staker",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(UintSet)12833_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)12292_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Seasons/SCMLRewards.sol:SCMLRewards": {
        "src": "SuperChamps/contracts/Seasons/SCMLRewards.sol:13",
        "version": {
          "withMetadata": "370cb27804ad363aab3cb6cd6c30a575a16f7ba79d0d1639f37feade6f507f39",
          "withoutMetadata": "6cd98b5ff55a88690bb840146d7daa59b2ac21fcc82d7dffa35d170f47b1d645",
          "linkedWithoutMetadata": "6cd98b5ff55a88690bb840146d7daa59b2ac21fcc82d7dffa35d170f47b1d645"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/ISCMLRewards.sol:ISCMLRewards"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "startLeaderboard(uint256,address[])",
          "endLeaderboard(uint256)",
          "finalize(uint256,uint256[],uint256)",
          "reportRewards(uint256,address[],uint256[][])",
          "claimReward(uint256)",
          "getClaimableReward(uint256)",
          "revokeUnclaimedReward(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMLRewards",
            "src": "SuperChamps/contracts/Seasons/SCMLRewards.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "memeLeaderboards",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_struct(MemeLeaderboard)24967_storage)dyn_storage",
              "contract": "SCMLRewards",
              "src": "SuperChamps/contracts/Seasons/SCMLRewards.sol:18"
            },
            {
              "label": "leaderboard_rewards",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))",
              "contract": "SCMLRewards",
              "src": "SuperChamps/contracts/Seasons/SCMLRewards.sol:21"
            },
            {
              "label": "claimed_rewards",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))",
              "contract": "SCMLRewards",
              "src": "SuperChamps/contracts/Seasons/SCMLRewards.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MemeLeaderboard)24967_storage)dyn_storage": {
              "label": "struct ISCMLRewards.MemeLeaderboard[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
              "label": "mapping(uint256 => mapping(address => mapping(address => uint256)))",
              "numberOfBytes": "32"
            },
            "t_struct(MemeLeaderboard)24967_storage": {
              "label": "struct ISCMLRewards.MemeLeaderboard",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "start_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "end_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reward_amount",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "remaining_reward_amount",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "claim_end_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:SCSeasonRewards": {
        "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:17",
        "version": {
          "withMetadata": "cb963853b43313affaef8959a49141f63ed427a7fa63359c524fcd818b0e8198",
          "withoutMetadata": "dd3dd109d0d3159524025c23be697d007d6e4103fa62a08adbc117b6c911a3ff",
          "linkedWithoutMetadata": "dd3dd109d0d3159524025c23be697d007d6e4103fa62a08adbc117b6c911a3ff"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/ISCSeasonRewards.sol:ISCSeasonRewards"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setStakingPool(address)",
          "setTreasury(address)",
          "startSeason(uint256)",
          "isSeasonActive((uint256,uint256,uint256,uint256,uint256,uint256),uint256)",
          "isSeasonFinalized((uint256,uint256,uint256,uint256,uint256,uint256))",
          "isSeasonEnded((uint256,uint256,uint256,uint256,uint256,uint256),uint256)",
          "isSeasonClaimingActive((uint256,uint256,uint256,uint256,uint256,uint256),uint256)",
          "isSeasonClaimingEnded((uint256,uint256,uint256,uint256,uint256,uint256),uint256)",
          "endSeason(uint256)",
          "revokeUnclaimedReward(uint256)",
          "finalize(uint256,uint256,uint256)",
          "reportRewards(uint256,address[],uint256[])",
          "claimReward(uint256)",
          "stakeReward(uint256)",
          "getClaimableReward(uint256)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCSeasonRewards",
            "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "treasury",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:22"
            },
            {
              "label": "access_pass",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(ISCAccessPass)24946",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:25"
            },
            {
              "label": "staking_pool",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ISCMetagamePool)25143",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:28"
            },
            {
              "label": "seasons",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_struct(Season)25205_storage)dyn_storage",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:31"
            },
            {
              "label": "season_rewards",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:34"
            },
            {
              "label": "claimed_rewards",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:37"
            },
            {
              "label": "consumed_signatures",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:41"
            },
            {
              "label": "player_last_signature_timestamp",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Season)25205_storage)dyn_storage": {
              "label": "struct ISCSeasonRewards.Season[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_memory_ptr": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(ISCAccessPass)24946": {
              "label": "contract ISCAccessPass",
              "numberOfBytes": "20"
            },
            "t_contract(ISCMetagamePool)25143": {
              "label": "contract ISCMetagamePool",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes_memory_ptr,t_bool)": {
              "label": "mapping(bytes => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_struct(Season)25205_storage": {
              "label": "struct ISCSeasonRewards.Season",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "start_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "end_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reward_amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "remaining_reward_amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "claim_end_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:ExponentialVestingEscrow": {
        "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:15",
        "version": {
          "withMetadata": "78b3ee2901cfcac253fb18e9d26b826753a962fb659727b859ab861cc83ac27d",
          "withoutMetadata": "e926c12b516000b13aba322bd103fbb716c781b8fde5c1d167af65b1d874a9a1",
          "linkedWithoutMetadata": "e926c12b516000b13aba322bd103fbb716c781b8fde5c1d167af65b1d874a9a1"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/IVestingEscrow.sol:IVestingEscrow"
        ],
        "libraries": [
          "SuperChamps/contracts/Utils/ABDKMath64x64.sol:ABDKMath64x64"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,uint256,uint256,uint256,uint256)",
          "unclaimed()",
          "locked()",
          "changeRecipient(address)",
          "claim(address,uint256)",
          "collect_dust(address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ExponentialVestingEscrow",
            "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "recipient",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:26"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)1411",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:29"
            },
            {
              "label": "start_time",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:32"
            },
            {
              "label": "rate_per_second",
              "offset": 0,
              "slot": "3",
              "type": "t_int128",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:36"
            },
            {
              "label": "total_locked",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:39"
            },
            {
              "label": "total_claimed",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:42"
            },
            {
              "label": "initialized",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:45"
            },
            {
              "label": "_reentrancy_locked",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1411": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Token/KiguEmission.sol:KiguEmission": {
        "src": "SuperChamps/contracts/Token/KiguEmission.sol:9",
        "version": {
          "withMetadata": "89e27a2cd8ea76c40380f8d89bc8d3a6045c860dbe5acd8919d11c052924dc38",
          "withoutMetadata": "fbbe77becff1096b1fa80eaf7122cd46bad3e438c47b4d517161c47342ec2a9e",
          "linkedWithoutMetadata": "fbbe77becff1096b1fa80eaf7122cd46bad3e438c47b4d517161c47342ec2a9e"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setMinter(address)",
          "setEmissionManager(address)",
          "setWalletsAndPercents(address[4],uint256[4])",
          "mintTokenAndDistribute()",
          "version()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "KiguEmission",
            "src": "SuperChamps/contracts/Token/KiguEmission.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "kiguToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)1411",
              "contract": "KiguEmission",
              "src": "SuperChamps/contracts/Token/KiguEmission.sol:10"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IKiguMinter)24860",
              "contract": "KiguEmission",
              "src": "SuperChamps/contracts/Token/KiguEmission.sol:11"
            },
            {
              "label": "wallets",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_address)4_storage",
              "contract": "KiguEmission",
              "src": "SuperChamps/contracts/Token/KiguEmission.sol:13"
            },
            {
              "label": "percents",
              "offset": 0,
              "slot": "7",
              "type": "t_array(t_uint256)4_storage",
              "contract": "KiguEmission",
              "src": "SuperChamps/contracts/Token/KiguEmission.sol:14"
            },
            {
              "label": "emissionManager",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "KiguEmission",
              "src": "SuperChamps/contracts/Token/KiguEmission.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)4_storage": {
              "label": "address[4]",
              "numberOfBytes": "128"
            },
            "t_array(t_uint256)4_storage": {
              "label": "uint256[4]",
              "numberOfBytes": "128"
            },
            "t_contract(IERC20)1411": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IKiguMinter)24860": {
              "label": "contract IKiguMinter",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Token/KiguMinter.sol:KiguMinter": {
        "src": "SuperChamps/contracts/Token/KiguMinter.sol:7",
        "version": {
          "withMetadata": "672ae1ae238c94d4c76303ba5788ed8197b3d640ead11579445cb9f595b901d4",
          "withoutMetadata": "db1f30b71ab24c562a0cf8ed33a94c0ab93df84e34ba64c592b853d252a3299f",
          "linkedWithoutMetadata": "db1f30b71ab24c562a0cf8ed33a94c0ab93df84e34ba64c592b853d252a3299f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "mintKiguToken()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "KiguMinter",
            "src": "SuperChamps/contracts/Token/KiguMinter.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "kigu",
            "src": "SuperChamps/contracts/Token/KiguMinter.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "emissionContract",
            "src": "SuperChamps/contracts/Token/KiguMinter.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "KiguMinter",
              "src": "SuperChamps/contracts/Token/KiguMinter.sol:14"
            },
            {
              "label": "epochCount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "KiguMinter",
              "src": "SuperChamps/contracts/Token/KiguMinter.sol:15"
            },
            {
              "label": "activePeriod",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "KiguMinter",
              "src": "SuperChamps/contracts/Token/KiguMinter.sol:16"
            },
            {
              "label": "lastEmission",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "KiguMinter",
              "src": "SuperChamps/contracts/Token/KiguMinter.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Token/KiguToken.sol:KiguToken": {
        "src": "SuperChamps/contracts/Token/KiguToken.sol:8",
        "version": {
          "withMetadata": "980d81e482c2d04fea5906c52fbfede1457ba100f5753eeb0e547787c5e545c6",
          "withoutMetadata": "7173452a1166197b8d31dd393a327b7de31efaef7bb506d53a646648a33c8f25",
          "linkedWithoutMetadata": "7173452a1166197b8d31dd393a327b7de31efaef7bb506d53a646648a33c8f25"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialMint(address)",
          "mint(address,uint256)",
          "setMinter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "KiguToken",
            "src": "SuperChamps/contracts/Token/KiguToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "KiguToken",
              "src": "SuperChamps/contracts/Token/KiguToken.sol:9"
            },
            {
              "label": "isInitialMintDone",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "KiguToken",
              "src": "SuperChamps/contracts/Token/KiguToken.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Token/SCRewardsDispenser.sol:SCRewardsDispenser": {
        "src": "SuperChamps/contracts/Token/SCRewardsDispenser.sol:16",
        "version": {
          "withMetadata": "59ee6381b53f707cd890d7b2c05e26a4211c430ca755260e2a2255ab3fba17d6",
          "withoutMetadata": "201f064daa49d1d9ed3a23e89b08458b1f459e033fe8d7128341dc8bdb2a25af",
          "linkedWithoutMetadata": "201f064daa49d1d9ed3a23e89b08458b1f459e033fe8d7128341dc8bdb2a25af"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "(address,address)",
          "extractSigner712(uint256,uint256,bytes)",
          "claim((uint256,uint256),bytes)",
          "withdraw()",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCRewardsDispenser",
            "src": "SuperChamps/contracts/Token/SCRewardsDispenser.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "SuperChamps/contracts/Token/SCRewardsDispenser.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "consumed_signatures",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
              "contract": "SCRewardsDispenser",
              "src": "SuperChamps/contracts/Token/SCRewardsDispenser.sol:29"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_memory_ptr": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes_memory_ptr,t_bool)": {
              "label": "mapping(bytes => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Token/SCShop.sol:SCShop": {
        "src": "SuperChamps/contracts/Token/SCShop.sol:15",
        "version": {
          "withMetadata": "6ff59494ae9bc2fd55c9a9717690f0cce15a5381ce8c00ec122b26e9d421cd1b",
          "withoutMetadata": "89a0f1f18409ca72a7bb3ff7a580265a5591673b0cf023d047ac18235c6226d8",
          "linkedWithoutMetadata": "89a0f1f18409ca72a7bb3ff7a580265a5591673b0cf023d047ac18235c6226d8"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "saleTransaction(address,address,uint256,string,string)",
          "nftChampTrade(address,address,uint256,address,uint256,string,bytes)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCShop",
            "src": "SuperChamps/contracts/Token/SCShop.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "SuperChamps/contracts/Token/SCShop.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Token/SuperChampsToken.sol:SuperChampsToken": {
        "src": "SuperChamps/contracts/Token/SuperChampsToken.sol:14",
        "version": {
          "withMetadata": "d43050564504f6d9f1589fa7f3de020b60eb8274edbb1ed1e310135b80f28db7",
          "withoutMetadata": "77fa1db8595619f5f35d9876f8b4d23025f07c5f58921dc7cb4ed740a5fd4f8a",
          "linkedWithoutMetadata": "77fa1db8595619f5f35d9876f8b4d23025f07c5f58921dc7cb4ed740a5fd4f8a"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "tokenGenerationEvent(address[],uint256[])",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "unlockTransfers()",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SuperChampsToken",
            "src": "SuperChamps/contracts/Token/SuperChampsToken.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "permissions",
            "src": "SuperChamps/contracts/Token/SuperChampsToken.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_SUPPLY",
            "src": "SuperChamps/contracts/Token/SuperChampsToken.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "transfersLocked",
              "offset": 0,
              "slot": "8",
              "type": "t_bool",
              "contract": "SuperChampsToken",
              "src": "SuperChamps/contracts/Token/SuperChampsToken.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Utils/ABDKMath64x64.sol:ABDKMath64x64": {
        "src": "SuperChamps/contracts/Utils/ABDKMath64x64.sol:16",
        "version": {
          "withMetadata": "cbba15890dd40eae5ded8fd2c3abf0cbc204b4f950e73319c231df21dd4bff21",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Utils/DeployGnosisProxies.sol:DeployGnosisProxies": {
        "src": "SuperChamps/contracts/Utils/DeployGnosisProxies.sol:11",
        "version": {
          "withMetadata": "41049d75046dbab29d3a69331d2fa4647f1b02b0ced3de706228e59a53eb8b6b",
          "withoutMetadata": "1241ee4823de20cc2a9d86ccf3684412ffb1c5974b38eebe21818ae44f03bc7b",
          "linkedWithoutMetadata": "1241ee4823de20cc2a9d86ccf3684412ffb1c5974b38eebe21818ae44f03bc7b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createSafes(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "FACTORY",
            "src": "SuperChamps/contracts/Utils/DeployGnosisProxies.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "FACTORY",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IGnosisSafeProxyFactory)12992",
              "contract": "DeployGnosisProxies",
              "src": "SuperChamps/contracts/Utils/DeployGnosisProxies.sol:12"
            }
          ],
          "types": {
            "t_contract(IGnosisSafeProxyFactory)12992": {
              "label": "contract IGnosisSafeProxyFactory",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Utils/DeploymentProxy.sol:CreateCall": {
        "src": "SuperChamps/contracts/Utils/DeploymentProxy.sol:10",
        "version": {
          "withMetadata": "88c43c5be7b6fdb1dffa5423931d632d8779bb1f505b3c501e2cd79049e61758",
          "withoutMetadata": "2778c8fb9a04a17f496fef4caf4a3647e781f013fbd15b674db600c0aa307776",
          "linkedWithoutMetadata": "2778c8fb9a04a17f496fef4caf4a3647e781f013fbd15b674db600c0aa307776"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "performCreate2(uint256,bytes,bytes32)",
          "performCreate(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Utils/PermissionsManager.sol:PermissionsManager": {
        "src": "SuperChamps/contracts/Utils/PermissionsManager.sol:13",
        "version": {
          "withMetadata": "fa0f6bd7f4a40f9d25db0a3ed466e66e5a7c5167a0f7d5acbf73024db34c0f85",
          "withoutMetadata": "0b625413aa2acc8d0eef345df74d012bd1953f676a9542371d86263daf20b6a3",
          "linkedWithoutMetadata": "0b625413aa2acc8d0eef345df74d012bd1953f676a9542371d86263daf20b6a3"
        },
        "inherit": [
          "SuperChamps/interfaces/IPermissionsManager.sol:IPermissionsManager"
        ],
        "libraries": [],
        "methods": [
          "()",
          "hasRole(uint8,address)",
          "addRole(uint8,address)",
          "removeRole(uint8,address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PermissionsManager",
            "src": "SuperChamps/contracts/Utils/PermissionsManager.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "role_mapping",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_enum(Role)24880,t_bool))",
              "contract": "PermissionsManager",
              "src": "SuperChamps/contracts/Utils/PermissionsManager.sol:15"
            },
            {
              "label": "role_count",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PermissionsManager",
              "src": "SuperChamps/contracts/Utils/PermissionsManager.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Role)24880": {
              "label": "enum IPermissionsManager.Role",
              "members": [
                "ANY",
                "GLOBAL_ADMIN",
                "MINT_ADMIN",
                "TRANSFER_ADMIN",
                "SYSTEMS_ADMIN",
                "EXT1",
                "EXT2",
                "EXT3",
                "EXT4",
                "EXT5",
                "EXT6",
                "EXT7",
                "EXT8",
                "EXT9",
                "EXT10"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Role)24880,t_bool))": {
              "label": "mapping(address => mapping(enum IPermissionsManager.Role => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Role)24880,t_bool)": {
              "label": "mapping(enum IPermissionsManager.Role => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Utils/SCDeploymentHelper.sol:SCDeploymentHelper": {
        "src": "SuperChamps/contracts/Utils/SCDeploymentHelper.sol:15",
        "version": {
          "withMetadata": "6c7fc99abb28af6a0da99782f86f1f71431d747da4bfcbed07c4b0dd9eae4b03",
          "withoutMetadata": "23d2fb5284e20debb23f2295c92ac17eed1d6b7cfe617a947f61072f223aac1c",
          "linkedWithoutMetadata": "23d2fb5284e20debb23f2295c92ac17eed1d6b7cfe617a947f61072f223aac1c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getERC20Address()",
          "getPermissionManagerAddress()",
          "initializeEmmissions(address,uint256,uint256)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCDeploymentHelper",
            "src": "SuperChamps/contracts/Utils/SCDeploymentHelper.sol:48"
          },
          {
            "kind": "state-variable-immutable",
            "name": "permissions",
            "src": "SuperChamps/contracts/Utils/SCDeploymentHelper.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SuperChampsToken)21218",
              "contract": "SCDeploymentHelper",
              "src": "SuperChamps/contracts/Utils/SCDeploymentHelper.sol:20"
            }
          ],
          "types": {
            "t_contract(SuperChampsToken)21218": {
              "label": "contract SuperChampsToken",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess": {
        "src": "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:8",
        "version": {
          "withMetadata": "cda208d1e79d4f1c027827264effec24d66537a7e286c45fd5312aa4266eefef",
          "withoutMetadata": "e52a5b64122c366b5012fcd1b1893f3f456b8029ebfed479cfce7288a070b2c0",
          "linkedWithoutMetadata": "e52a5b64122c366b5012fcd1b1893f3f456b8029ebfed479cfce7288a070b2c0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCPermissionedAccess",
            "src": "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "permissions",
            "src": "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/IERC721MetadataRenderer.sol:IERC721MetadataRenderer": {
        "src": "SuperChamps/interfaces/IERC721MetadataRenderer.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "tokenURI(uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/IKigu.sol:IKigu": {
        "src": "SuperChamps/interfaces/IKigu.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/IKiguMinter.sol:IKiguMinter": {
        "src": "SuperChamps/interfaces/IKiguMinter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintKiguToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/IPermissionsManager.sol:IPermissionsManager": {
        "src": "SuperChamps/interfaces/IPermissionsManager.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(uint8,address)",
          "addRole(uint8,address)",
          "removeRole(uint8,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/ISCAccessPass.sol:ISCAccessPass": {
        "src": "SuperChamps/interfaces/ISCAccessPass.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPassHolder(address)",
          "isVerified(address)",
          "getLevel(address)",
          "getLevel(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/ISCMLRewards.sol:ISCMLRewards": {
        "src": "SuperChamps/interfaces/ISCMLRewards.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "startLeaderboard(uint256,address[])",
          "endLeaderboard(uint256)",
          "finalize(uint256,uint256[],uint256)",
          "reportRewards(uint256,address[],uint256[][])",
          "claimReward(uint256)",
          "getClaimableReward(uint256)",
          "revokeUnclaimedReward(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/ISCMetagameDataSource.sol:ISCMetagameDataSource": {
        "src": "SuperChamps/interfaces/ISCMetagameDataSource.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMultiplier(address,string)",
          "getMembership(address,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/ISCMetagamePool.sol:ISCMetagamePool": {
        "src": "SuperChamps/interfaces/ISCMetagamePool.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256)",
          "stakeFor(address,uint256)",
          "approve(address,uint256)",
          "spend(uint256,address,address,string)",
          "unstake(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/ISCMetagameRegistry.sol:ISCMetagameRegistry": {
        "src": "SuperChamps/interfaces/ISCMetagameRegistry.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "metadataFromAddress(address,string)",
          "metadataFromUserID(string,string)",
          "addressToUserID(address)",
          "registerUserInfo(string,address,string,string,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/ISCSeasonRewards.sol:ISCSeasonRewards": {
        "src": "SuperChamps/interfaces/ISCSeasonRewards.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "startSeason(uint256)",
          "endSeason(uint256)",
          "finalize(uint256,uint256,uint256)",
          "reportRewards(uint256,address[],uint256[])",
          "claimReward(uint256)",
          "getClaimableReward(uint256)",
          "revokeUnclaimedReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/ISuperChampsToken.sol:ISuperChampsToken": {
        "src": "SuperChamps/interfaces/ISuperChampsToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permissions()",
          "transfersLocked()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "SuperChamps/interfaces/IVestingEscrow.sol:IVestingEscrow": {
        "src": "SuperChamps/interfaces/IVestingEscrow.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256)",
          "unclaimed()",
          "locked()",
          "claim(address,uint256)",
          "collect_dust(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "Synthetix/contracts/Owned.sol:Owned": {
        "src": "Synthetix/contracts/Owned.sol:7",
        "version": {
          "withMetadata": "15cb24ac7bda7793f9c42e7406d0a08117ca07419d916ec7a12ac57835824532",
          "withoutMetadata": "f12173e43cc04795815e6a33f479784e5622207a6cdbef0c3c35f8827d1a31ed",
          "linkedWithoutMetadata": "f12173e43cc04795815e6a33f479784e5622207a6cdbef0c3c35f8827d1a31ed"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "Synthetix/contracts/Owned.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:8"
            },
            {
              "label": "nominatedOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "Synthetix/contracts/Pausable.sol:Pausable": {
        "src": "Synthetix/contracts/Pausable.sol:10",
        "inherit": [
          "Synthetix/contracts/Owned.sol:Owned"
        ],
        "libraries": [],
        "methods": [
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "Synthetix/contracts/Pausable.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:8"
            },
            {
              "label": "nominatedOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:9"
            },
            {
              "label": "lastPauseTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:11"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "Synthetix/contracts/RewardsDistributionRecipient.sol:RewardsDistributionRecipient": {
        "src": "Synthetix/contracts/RewardsDistributionRecipient.sol:10",
        "version": {
          "withMetadata": "492fd14105581d9a3b39c963e385dd4400bd5a05223529d9b27e7b6c1a2c1d2e",
          "withoutMetadata": "fc4c73dfea6a763657ce9e41516945a642e44de669f1bb42b62dfc726e3b6581",
          "linkedWithoutMetadata": "fc4c73dfea6a763657ce9e41516945a642e44de669f1bb42b62dfc726e3b6581"
        },
        "inherit": [
          "Synthetix/contracts/Owned.sol:Owned"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "(address)",
          "setRewardsDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardsDistributionRecipient",
            "src": "Synthetix/contracts/RewardsDistributionRecipient.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:8"
            },
            {
              "label": "nominatedOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:9"
            },
            {
              "label": "rewardsDistribution",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "RewardsDistributionRecipient",
              "src": "Synthetix/contracts/RewardsDistributionRecipient.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "Synthetix/contracts/StakingRewards.sol:StakingRewards": {
        "src": "Synthetix/contracts/StakingRewards.sol:15",
        "version": {
          "withMetadata": "0d9c6f54614d55b2199eede52e2d2a2424e1a09dd92d3c55ecb4eb32d6e69c27",
          "withoutMetadata": "38a0529c8766144105cb192b8d8184c798aab9a4ac219a4a451630d93cab7774",
          "linkedWithoutMetadata": "38a0529c8766144105cb192b8d8184c798aab9a4ac219a4a451630d93cab7774"
        },
        "inherit": [
          "Synthetix/contracts/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "Synthetix/contracts/RewardsDistributionRecipient.sol:RewardsDistributionRecipient",
          "Synthetix/contracts/Owned.sol:Owned",
          "Synthetix/contracts/interfaces/IStakingRewards.sol:IStakingRewards"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "totalSupply()",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "getRewardForDuration()",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "notifyRewardAmount(uint256)",
          "recoverERC20(address,uint256)",
          "setRewardsDuration(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingRewards",
            "src": "Synthetix/contracts/StakingRewards.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "Synthetix/contracts/StakingRewards.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "Synthetix/contracts/StakingRewards.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardsDuration",
            "src": "Synthetix/contracts/StakingRewards.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:8"
            },
            {
              "label": "nominatedOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:9"
            },
            {
              "label": "rewardsDistribution",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "RewardsDistributionRecipient",
              "src": "Synthetix/contracts/RewardsDistributionRecipient.sol:11"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "lastPauseTime",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:11"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:12"
            },
            {
              "label": "rewardsToken",
              "offset": 1,
              "slot": "5",
              "type": "t_contract(IERC20)1411",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:18"
            },
            {
              "label": "stakingToken",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)1411",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:19"
            },
            {
              "label": "periodFinish",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:20"
            },
            {
              "label": "rewardRate",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:21"
            },
            {
              "label": "rewardsDuration",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:22"
            },
            {
              "label": "lastUpdateTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:23"
            },
            {
              "label": "rewardPerTokenStored",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:24"
            },
            {
              "label": "userRewardPerTokenPaid",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:26"
            },
            {
              "label": "rewards",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:27"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1411": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "Synthetix/contracts/interfaces/IStakingRewards.sol:IStakingRewards": {
        "src": "Synthetix/contracts/interfaces/IStakingRewards.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "earned(address)",
          "getRewardForDuration()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "rewardsToken()",
          "totalSupply()",
          "exit()",
          "getReward()",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    }
  ]
}