{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Metagame/SCLock.sol:ISCLockOld": {
        "src": "SuperChamps/contracts/Metagame/SCLock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLockHistory(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Metagame/SCLock.sol:SCLock": {
        "src": "SuperChamps/contracts/Metagame/SCLock.sol:20",
        "version": {
          "withMetadata": "f8661eea6b4857941be8550da6e01e094f91caf3a3fc3fae1880adf8c4da095b",
          "withoutMetadata": "50642b0fbc1985a899010ce4adc0790bc107d37369bd6ffc2fb31996d7ba274c",
          "linkedWithoutMetadata": "50642b0fbc1985a899010ce4adc0790bc107d37369bd6ffc2fb31996d7ba274c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "lock(uint256,uint256)",
          "extendLock(uint256,uint256)",
          "claim(uint256)",
          "importLocksFromOldContract(address,address[])",
          "hasImportedLocks(address)",
          "getLockHistory(address)",
          "getClaimHistory(address)",
          "getLockHistoryPaginated(address,uint256,uint256)",
          "getClaimHistoryPaginated(address,uint256,uint256)",
          "getClaimable(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)586",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:35"
            },
            {
              "label": "lockHistory",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_array(t_struct(LockEvent)627_storage)dyn_storage)",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:37"
            },
            {
              "label": "claimHistory",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_array(t_struct(ClaimEvent)634_storage)dyn_storage)",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:38"
            },
            {
              "label": "isLockImported",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(ClaimEvent)634_storage)dyn_storage": {
              "label": "struct SCLock.ClaimEvent[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(LockEvent)627_storage)dyn_storage": {
              "label": "struct SCLock.LockEvent[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)586": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_struct(ClaimEvent)634_storage)dyn_storage)": {
              "label": "mapping(address => struct SCLock.ClaimEvent[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(LockEvent)627_storage)dyn_storage)": {
              "label": "mapping(address => struct SCLock.LockEvent[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(ClaimEvent)634_storage": {
              "label": "struct SCLock.ClaimEvent",
              "members": [
                {
                  "label": "lockId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "claimedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(LockEvent)627_storage": {
              "label": "struct SCLock.LockEvent",
              "members": [
                {
                  "label": "lockId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isClaimed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.30"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "7054233022db3dc857c93a04e7d3bc552f146cc4bbf9de533e948fbfc66598ac",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/Arrays.sol:Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:15",
        "version": {
          "withMetadata": "c3251d8ea7195395288afa3b8c267ef3694d81ea097df80a1a9924a1f6ae80e9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/SlotDerivation.sol:SlotDerivation",
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Comparators.sol:Comparators",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/Comparators.sol:Comparators": {
        "src": "@openzeppelin/contracts/utils/Comparators.sol:11",
        "version": {
          "withMetadata": "c211626ce531ff26b5b84023273aececdff3dfde4f6ab535a3e248483643df64",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/Nonces.sol:Nonces": {
        "src": "@openzeppelin/contracts/utils/Nonces.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "c972c9a1f6ddcf55c6f6c801e0f6d3df6af62020bb065d8b1a74a81a5375581c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings": {
        "src": "@openzeppelin/contracts/utils/ShortStrings.sol:40",
        "version": {
          "withMetadata": "2b24d1b044cf7655e851ae8c9c4e6d2ad360a190ae66afe4323f85f9ad999a04",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/SlotDerivation.sol:SlotDerivation": {
        "src": "@openzeppelin/contracts/utils/SlotDerivation.sol:41",
        "version": {
          "withMetadata": "d35395f326d4145669c3a4a079c67f785d3215ffb99dd680f3f0526fa98fd8d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "39b5a49af0e8712b58f63314e452723e5e17ce82708de491475b7f0a589a1322",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "7405129473504f212e2dfc812865adeb7973dc325df4401f2beb9740deb8b3a2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "07fe51888467fad972c2cbe4f20f61c6286cb84bf2204278ac8f4b2e6b4b3707",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings",
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:68"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "9a04f40b5dd7d0f3464d8d319695f7ec56797d777ca59cabf08d0fb56b908ba4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "732faba8ca78c30e965e85b7db71644a8574583e5e409def5c257c0fb7d43500",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "827297de8fe137f3fdc37d72955c92e82696fd57a1d7454cb7caca04f4df5bac",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "2eab9da54c8bb2572f1f298402a2b24e31c9bf5ee9ab4b34f2888308f732ca8f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableMap.sol:EnumerableMap": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableMap.sol:53",
        "version": {
          "withMetadata": "02676912cd6d11e2d7f93c274e69e9bb0f9e5c16f6267992576a9f1220814764",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:44",
        "version": {
          "withMetadata": "447d444fd2f82867ef67b0e344a9c6729e5ed2cdb044dd92059d55c828ded757",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Arrays.sol:Arrays"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "Gnosis/interfaces/IGnosisSafeProxyFactory.sol:IGnosisSafeProxyFactory": {
        "src": "Gnosis/interfaces/IGnosisSafeProxyFactory.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createProxyWithNonce(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:ISCVirtualAssetEventsFactory": {
        "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:46",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permissions_users(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:SCVirtualAssetEvents": {
        "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:10",
        "version": {
          "withMetadata": "e6ea49362a0c72be8f1284925b84dfc684059c967bf6f8b948400b1ece364b13",
          "withoutMetadata": "529e17e0472c9562ad5c1654cb26544d09324ef4243222c8662e2bb9b4a81850",
          "linkedWithoutMetadata": "529e17e0472c9562ad5c1654cb26544d09324ef4243222c8662e2bb9b4a81850"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,string)",
          "EmitGameUserAsset(string,string,int256,string)",
          "EmitGameUserActivity(string,string)",
          "EmitGameUserAssetWithSign(string,string,int256,string,bytes)",
          "EmitGameUserActivityWithSign(string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCVirtualAssetEvents",
            "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_factory",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ISCVirtualAssetEventsFactory)12956",
              "contract": "SCVirtualAssetEvents",
              "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:11"
            },
            {
              "label": "game",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SCVirtualAssetEvents",
              "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:12"
            }
          ],
          "types": {
            "t_contract(ISCVirtualAssetEventsFactory)12956": {
              "label": "contract ISCVirtualAssetEventsFactory",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:SCVirtualAssetEventsFactory": {
        "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:53",
        "version": {
          "withMetadata": "f7816842332f7a4927f58d83407caec0f2b5a806158af6cf419da58b398cb6aa",
          "withoutMetadata": "c22bcecc7d085a15ccace70f3463bda3eba0d3f16d6cad9f22f4d37509396c5c",
          "linkedWithoutMetadata": "c22bcecc7d085a15ccace70f3463bda3eba0d3f16d6cad9f22f4d37509396c5c"
        },
        "inherit": [
          "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:ISCVirtualAssetEventsFactory",
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "permissionUser(address[],bool)",
          "deployGameEvents(string)",
          "games()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCVirtualAssetEventsFactory",
            "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "permissions_users",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SCVirtualAssetEventsFactory",
              "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:54"
            },
            {
              "label": "game_events",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_string_memory_ptr,t_contract(SCVirtualAssetEvents)12948)",
              "contract": "SCVirtualAssetEventsFactory",
              "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:55"
            },
            {
              "label": "_games",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "SCVirtualAssetEventsFactory",
              "src": "SuperChamps/contracts/Ecosystem/SCVirtualAssetEvents.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(SCVirtualAssetEvents)12948": {
              "label": "contract SCVirtualAssetEvents",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_contract(SCVirtualAssetEvents)12948)": {
              "label": "mapping(string => contract SCVirtualAssetEvents)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Metagame/SCLock.sol:ISCLockOld": {
        "src": "SuperChamps/contracts/Metagame/SCLock.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLockHistory(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Metagame/SCLock.sol:SCLock": {
        "src": "SuperChamps/contracts/Metagame/SCLock.sol:20",
        "version": {
          "withMetadata": "f8661eea6b4857941be8550da6e01e094f91caf3a3fc3fae1880adf8c4da095b",
          "withoutMetadata": "50642b0fbc1985a899010ce4adc0790bc107d37369bd6ffc2fb31996d7ba274c",
          "linkedWithoutMetadata": "50642b0fbc1985a899010ce4adc0790bc107d37369bd6ffc2fb31996d7ba274c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "lock(uint256,uint256)",
          "extendLock(uint256,uint256)",
          "claim(uint256)",
          "importLocksFromOldContract(address,address[])",
          "hasImportedLocks(address)",
          "getLockHistory(address)",
          "getClaimHistory(address)",
          "getLockHistoryPaginated(address,uint256,uint256)",
          "getClaimHistoryPaginated(address,uint256,uint256)",
          "getClaimable(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)1263",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:35"
            },
            {
              "label": "lockHistory",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_array(t_struct(LockEvent)13139_storage)dyn_storage)",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:37"
            },
            {
              "label": "claimHistory",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_array(t_struct(ClaimEvent)13146_storage)dyn_storage)",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:38"
            },
            {
              "label": "isLockImported",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SCLock",
              "src": "SuperChamps/contracts/Metagame/SCLock.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(ClaimEvent)13146_storage)dyn_storage": {
              "label": "struct SCLock.ClaimEvent[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(LockEvent)13139_storage)dyn_storage": {
              "label": "struct SCLock.LockEvent[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1263": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_struct(ClaimEvent)13146_storage)dyn_storage)": {
              "label": "mapping(address => struct SCLock.ClaimEvent[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(LockEvent)13139_storage)dyn_storage)": {
              "label": "mapping(address => struct SCLock.LockEvent[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(ClaimEvent)13146_storage": {
              "label": "struct SCLock.ClaimEvent",
              "members": [
                {
                  "label": "lockId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "claimedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(LockEvent)13139_storage": {
              "label": "struct SCLock.LockEvent",
              "members": [
                {
                  "label": "lockId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "endTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isClaimed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Metagame/SCMetagameGenericDataView.sol:SCMetagameGenericDataView": {
        "src": "SuperChamps/contracts/Metagame/SCMetagameGenericDataView.sol:15",
        "version": {
          "withMetadata": "4b89d85e60c1b7e989b3352bc83fa079021e9f07c0cb8d1a6ce8b78f0a8e746b",
          "withoutMetadata": "7e361cfc5e5fa7e2c0bcfe807e5cf4b3f7196eced0aa74b106fdab25230e0386",
          "linkedWithoutMetadata": "7e361cfc5e5fa7e2c0bcfe807e5cf4b3f7196eced0aa74b106fdab25230e0386"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/ISCMetagameDataSource.sol:ISCMetagameDataSource"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setLocationView(address,string)",
          "getBaseMultiplier(address)",
          "getMultiplier(address,string)",
          "getMembership(address,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMetagameGenericDataView",
            "src": "SuperChamps/contracts/Metagame/SCMetagameGenericDataView.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "metadata_registry",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ISCMetagameRegistry)24353",
              "contract": "SCMetagameGenericDataView",
              "src": "SuperChamps/contracts/Metagame/SCMetagameGenericDataView.sol:19"
            },
            {
              "label": "location_views",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_string_memory_ptr,t_contract(ISCMetagameDataSource)24219)",
              "contract": "SCMetagameGenericDataView",
              "src": "SuperChamps/contracts/Metagame/SCMetagameGenericDataView.sol:22"
            }
          ],
          "types": {
            "t_contract(ISCMetagameDataSource)24219": {
              "label": "contract ISCMetagameDataSource",
              "numberOfBytes": "20"
            },
            "t_contract(ISCMetagameRegistry)24353": {
              "label": "contract ISCMetagameRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_string_memory_ptr,t_contract(ISCMetagameDataSource)24219)": {
              "label": "mapping(string => contract ISCMetagameDataSource)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:SCMetagameLocationRewards": {
        "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:14",
        "version": {
          "withMetadata": "182b5e455a2e0a97b2bbca05dc3f7d3f9da0c8b9543ebfc68fa066041ccbb28a",
          "withoutMetadata": "0df27a1fbaaa2684fa9b26ec0d1a350ae1de4c471023b2e050e64771f9ae19aa",
          "linkedWithoutMetadata": "0df27a1fbaaa2684fa9b26ec0d1a350ae1de4c471023b2e050e64771f9ae19aa"
        },
        "inherit": [
          "Synthetix/contracts/StakingRewards.sol:StakingRewards",
          "Synthetix/contracts/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "Synthetix/contracts/RewardsDistributionRecipient.sol:RewardsDistributionRecipient",
          "Synthetix/contracts/Owned.sol:Owned",
          "Synthetix/contracts/interfaces/IStakingRewards.sol:IStakingRewards"
        ],
        "libraries": [],
        "methods": [
          "(address,address,string,address)",
          "updateMultiplier(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMetagameLocationRewards",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metagame_data",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:8"
            },
            {
              "label": "nominatedOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:9"
            },
            {
              "label": "rewardsDistribution",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "RewardsDistributionRecipient",
              "src": "Synthetix/contracts/RewardsDistributionRecipient.sol:11"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "lastPauseTime",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:11"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:12"
            },
            {
              "label": "rewardsToken",
              "offset": 1,
              "slot": "5",
              "type": "t_contract(IERC20)1263",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:18"
            },
            {
              "label": "stakingToken",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)1263",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:19"
            },
            {
              "label": "periodFinish",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:20"
            },
            {
              "label": "rewardRate",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:21"
            },
            {
              "label": "rewardsDuration",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:22"
            },
            {
              "label": "lastUpdateTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:23"
            },
            {
              "label": "rewardPerTokenStored",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:24"
            },
            {
              "label": "userRewardPerTokenPaid",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:26"
            },
            {
              "label": "rewards",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:27"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:30"
            },
            {
              "label": "location_id",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "SCMetagameLocationRewards",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:19"
            },
            {
              "label": "access_pass",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(ISCAccessPass)24110",
              "contract": "SCMetagameLocationRewards",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:22"
            },
            {
              "label": "staked_supply",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "SCMetagameLocationRewards",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:25"
            },
            {
              "label": "user_stakes",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SCMetagameLocationRewards",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:28"
            },
            {
              "label": "_multiplier_basis_points",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SCMetagameLocationRewards",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocationRewards.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1263": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(ISCAccessPass)24110": {
              "label": "contract ISCAccessPass",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:SCMetagameLocations": {
        "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:17",
        "version": {
          "withMetadata": "3bfd797590bcf110a27e34ac29a1a9e02d39ecd7f6fdaca824c8c6341f4b7d55",
          "withoutMetadata": "5bdbf9e3f6fcfce3e255f90e10740d24864d62c0ff472fa4849c5be8ba71b4e8",
          "linkedWithoutMetadata": "5bdbf9e3f6fcfce3e255f90e10740d24864d62c0ff472fa4849c5be8ba71b4e8"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/ISCMetagameDataSource.sol:ISCMetagameDataSource"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "setTreasury(address)",
          "setDataView(address)",
          "addLocation(string)",
          "getLocationRewardsStaker(string)",
          "distributeRewards(uint256,string[],uint256[])",
          "recoverERC20(address,uint256)",
          "recoverERC20FromLocation(string,address,uint256)",
          "setEpochDuration(uint256)",
          "locationCount()",
          "getMultiplier(address,string)",
          "getMembership(address,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMetagameLocations",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:61"
          },
          {
            "kind": "state-variable-immutable",
            "name": "metadata",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "EPOCH",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "current_epoch",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "next_epoch",
            "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "data_view",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ISCMetagameDataSource)24219",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:26"
            },
            {
              "label": "access_pass",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(ISCAccessPass)24110",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:29"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:33"
            },
            {
              "label": "EPOCH",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:36"
            },
            {
              "label": "location_rewards",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_string_memory_ptr,t_contract(SCMetagameLocationRewards)14405)",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:39"
            },
            {
              "label": "locations",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:42"
            },
            {
              "label": "award_tiers_bps",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:46"
            },
            {
              "label": "current_epoch",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:49"
            },
            {
              "label": "next_epoch",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "SCMetagameLocations",
              "src": "SuperChamps/contracts/Metagame/SCMetagameLocations.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_contract(ISCAccessPass)24110": {
              "label": "contract ISCAccessPass",
              "numberOfBytes": "20"
            },
            "t_contract(ISCMetagameDataSource)24219": {
              "label": "contract ISCMetagameDataSource",
              "numberOfBytes": "20"
            },
            "t_contract(SCMetagameLocationRewards)14405": {
              "label": "contract SCMetagameLocationRewards",
              "numberOfBytes": "20"
            },
            "t_mapping(t_string_memory_ptr,t_contract(SCMetagameLocationRewards)14405)": {
              "label": "mapping(string => contract SCMetagameLocationRewards)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Metagame/SCMetagamePool.sol:SCMetagamePool": {
        "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:15",
        "version": {
          "withMetadata": "2ab0444e1e36474313dc44eec97c9c1b8635941391230da8742534debfe5d9f8",
          "withoutMetadata": "50cfcbdc849ddb3902928f978a382f4e76e4d0b8a878b6173f4812c5366e7062",
          "linkedWithoutMetadata": "50cfcbdc849ddb3902928f978a382f4e76e4d0b8a878b6173f4812c5366e7062"
        },
        "inherit": [
          "SuperChamps/interfaces/ISCMetagamePool.sol:ISCMetagamePool",
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "stake(uint256)",
          "stakeFor(address,uint256)",
          "approve(address,uint256)",
          "spend(uint256,address,address,string)",
          "unstake(uint256)",
          "checkpoint_timestamps(address)",
          "checkpoint_timestamps_range(address,uint256,uint256)",
          "checkpoints(address,uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMetagamePool",
            "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_user_to_checkpoint_to_data",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(StakingData)14962_storage))",
              "contract": "SCMetagamePool",
              "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:24"
            },
            {
              "label": "_user_checkpoints",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "SCMetagamePool",
              "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:25"
            },
            {
              "label": "_user_to_approved_spend",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "SCMetagamePool",
              "src": "SuperChamps/contracts/Metagame/SCMetagamePool.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(StakingData)14962_storage))": {
              "label": "mapping(address => mapping(uint256 => struct SCMetagamePool.StakingData))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingData)14962_storage)": {
              "label": "mapping(uint256 => struct SCMetagamePool.StakingData)",
              "numberOfBytes": "32"
            },
            "t_struct(StakingData)14962_storage": {
              "label": "struct SCMetagamePool.StakingData",
              "members": [
                {
                  "label": "balance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "msg_sender",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:SCMetagameRegistry": {
        "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:15",
        "version": {
          "withMetadata": "087b53ad0ab3337e6ca8c508a80f98f8a83bc8066d2714374e8d8f1bc04f290c",
          "withoutMetadata": "e1a8eca1da53b2c0b82a0f7b986d11d78f29bca9b87c8599b6eb95a78789f92e",
          "linkedWithoutMetadata": "e1a8eca1da53b2c0b82a0f7b986d11d78f29bca9b87c8599b6eb95a78789f92e"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/ISCMetagameRegistry.sol:ISCMetagameRegistry"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "hashMessage(string,address,string,string,uint256,uint256)",
          "metadataFromAddress(address,string)",
          "metadataFromUserID(string,string)",
          "addressToUserID(address)",
          "registerUserInfo(string,address,string,string,uint256,uint256,bytes)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMetagameRegistry",
            "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "address_to_uid_hash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "SCMetagameRegistry",
              "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:17"
            },
            {
              "label": "uid_hash_to_user_id",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "SCMetagameRegistry",
              "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:20"
            },
            {
              "label": "metadata",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))",
              "contract": "SCMetagameRegistry",
              "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:23"
            },
            {
              "label": "consumed_signatures",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
              "contract": "SCMetagameRegistry",
              "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:27"
            },
            {
              "label": "uid_hash_last_nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_string_memory_ptr,t_uint256)",
              "contract": "SCMetagameRegistry",
              "src": "SuperChamps/contracts/Metagame/SCMetagameRegistry.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_memory_ptr": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))": {
              "label": "mapping(bytes32 => mapping(string => string))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes_memory_ptr,t_bool)": {
              "label": "mapping(bytes => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_string_storage)": {
              "label": "mapping(string => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_uint256)": {
              "label": "mapping(string => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/NFTs/SCAccessPass.sol:SCAccessPass": {
        "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:16",
        "version": {
          "withMetadata": "7b4f051250d1d6453ab76ce699648171ac7053f9bb1ec1ed2f995f73142cb14b",
          "withoutMetadata": "646e8845a63c746385dc97c337a23bd29d6343486160fb8d3cb3ef4e39ea9874",
          "linkedWithoutMetadata": "646e8845a63c746385dc97c337a23bd29d6343486160fb8d3cb3ef4e39ea9874"
        },
        "inherit": [
          "SuperChamps/interfaces/ISCAccessPass.sol:ISCAccessPass",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,string,string,string)",
          "getLevel(address)",
          "getLevel(uint256)",
          "setRenderer(address)",
          "setPrice(uint256,uint256)",
          "collect(address payable)",
          "verifyPassHolder(address,bool)",
          "register()",
          "freeRegister(address)",
          "upgrade()",
          "freeUpgrade(address)",
          "burnToken(address)",
          "isPassHolder(address)",
          "isVerified(address)",
          "transferFrom(address,address,uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCAccessPass",
            "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:49"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_permissions",
            "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upgrade_prices",
            "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:33"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_tokenIdCounter",
            "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_renderer",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC721MetadataRenderer)24024",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:18"
            },
            {
              "label": "_passholder_id",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:24"
            },
            {
              "label": "_verified",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:27"
            },
            {
              "label": "_pass_level",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:30"
            },
            {
              "label": "upgrade_prices",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:33"
            },
            {
              "label": "_tokenIdCounter",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "SCAccessPass",
              "src": "SuperChamps/contracts/NFTs/SCAccessPass.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC721MetadataRenderer)24024": {
              "label": "contract IERC721MetadataRenderer",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:SCAccessPassRenderer": {
        "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:14",
        "version": {
          "withMetadata": "5c6c19dd9d25b77d05873f117cffa32ed95c5aa8a059d9ea7f41e25ab227b17a",
          "withoutMetadata": "1c40318244a3216912cfb4e6dae53e84121a4d7b7adf9cf9f46e1083b3c95a83",
          "linkedWithoutMetadata": "1c40318244a3216912cfb4e6dae53e84121a4d7b7adf9cf9f46e1083b3c95a83"
        },
        "inherit": [
          "SuperChamps/interfaces/IERC721MetadataRenderer.sol:IERC721MetadataRenderer"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(address,address,string,string,string)",
          "setURI(string,bool)",
          "setAccessPass(address)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "tokenURI(uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCAccessPassRenderer",
            "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_permissions",
            "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_access_pass",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(ISCAccessPass)24110",
              "contract": "SCAccessPassRenderer",
              "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:21"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SCAccessPassRenderer",
              "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "SCAccessPassRenderer",
              "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "SCAccessPassRenderer",
              "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:30"
            },
            {
              "label": "_concatenate_ids",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "SCAccessPassRenderer",
              "src": "SuperChamps/contracts/NFTs/SCAccessPassRenderer.sol:33"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISCAccessPass)24110": {
              "label": "contract ISCAccessPass",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:SCGenericRenderer": {
        "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:13",
        "version": {
          "withMetadata": "06f6f5240f8e99e1fc8591077594b82bc9b0a808249a0713658e823f9911adb8",
          "withoutMetadata": "7b255ff0903fe81574fbd594f7ba9f963bde83f4620bb15426336e5219caae3d",
          "linkedWithoutMetadata": "7b255ff0903fe81574fbd594f7ba9f963bde83f4620bb15426336e5219caae3d"
        },
        "inherit": [
          "SuperChamps/interfaces/IERC721MetadataRenderer.sol:IERC721MetadataRenderer"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(address,string,string,string)",
          "setURI(string,bool)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "tokenURI(uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCGenericRenderer",
            "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:40"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_permissions",
            "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_concatenate_ids",
            "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "SCGenericRenderer",
              "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:20"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SCGenericRenderer",
              "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:23"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "SCGenericRenderer",
              "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:26"
            },
            {
              "label": "_concatenate_ids",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "SCGenericRenderer",
              "src": "SuperChamps/contracts/NFTs/SCGenericRenderer.sol:29"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:SCTempLockedNFT": {
        "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:18",
        "version": {
          "withMetadata": "0430279c4946fda6146879cff8f1b74d2bec994df8f8df73d41421de1296b90e",
          "withoutMetadata": "b272f1051c9bc494815cfe6d3dbfbd14007d1a96555e524ad388a428d3ff6c0d",
          "linkedWithoutMetadata": "b272f1051c9bc494815cfe6d3dbfbd14007d1a96555e524ad388a428d3ff6c0d"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,string,address)",
          "setRenderer(address)",
          "mintTo(address,uint256,uint96,uint96,uint64)",
          "transferFrom(address,address,uint256)",
          "extendExpiry(uint256,uint64)",
          "cleanup(uint256[])",
          "unlockTokens(uint256[])",
          "unlockTokenGroup(uint128)",
          "unlockTokenSpecies(uint128,uint128)",
          "unlockCollection(bool)",
          "isUnlocked(uint256)",
          "recoverERC20(address,uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCTempLockedNFT",
            "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:58"
          },
          {
            "kind": "state-variable-immutable",
            "name": "champ_token",
            "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_renderer",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC721MetadataRenderer)24024",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:26"
            },
            {
              "label": "_token_data",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(TokenData)16916_storage)",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:32"
            },
            {
              "label": "_unlocked_tokens",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:35"
            },
            {
              "label": "_unlocked_species",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:38"
            },
            {
              "label": "_unlocked_groups",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint128,t_bool)",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:41"
            },
            {
              "label": "_all_unlocked",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "SCTempLockedNFT",
              "src": "SuperChamps/contracts/NFTs/SCTempLockedNFT.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC721MetadataRenderer)24024": {
              "label": "contract IERC721MetadataRenderer",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bool)": {
              "label": "mapping(uint128 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenData)16916_storage)": {
              "label": "mapping(uint256 => struct SCTempLockedNFT.TokenData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenData)16916_storage": {
              "label": "struct SCTempLockedNFT.TokenData",
              "members": [
                {
                  "label": "group",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "species",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:GenesisNFTStaking": {
        "src": "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:16",
        "version": {
          "withMetadata": "373ea5741def5abe0f6591f3577dfe1637e36350525c922e5fd3fe1851dc40a1",
          "withoutMetadata": "41b80fcc288111c1aa4fa2d463fd149e312b4df749f220a4e8a4649161490b5b",
          "linkedWithoutMetadata": "41b80fcc288111c1aa4fa2d463fd149e312b4df749f220a4e8a4649161490b5b"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "(address)",
          "supportsInterface(bytes4)",
          "deposit(uint256[])",
          "withdraw(uint256[])",
          "StakedTokens(address)",
          "TokenData(uint256[])",
          "onERC721Received(address,address,uint256,bytes)",
          "underlying()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenesisNFTStaking",
            "src": "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_underlying",
            "src": "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "staking_data",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(StakingData)17493_storage)",
              "contract": "GenesisNFTStaking",
              "src": "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:26"
            },
            {
              "label": "staked_tokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)12639_storage)",
              "contract": "GenesisNFTStaking",
              "src": "SuperChamps/contracts/Seasons/GenesisNFTStaking.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)12639_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingData)17493_storage)": {
              "label": "mapping(uint256 => struct GenesisNFTStaking.StakingData)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)12098_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StakingData)17493_storage": {
              "label": "struct GenesisNFTStaking.StakingData",
              "members": [
                {
                  "label": "last_staked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "last_unstaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "last_staker",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(UintSet)12639_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)12098_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Seasons/SCMLRewards.sol:SCMLRewards": {
        "src": "SuperChamps/contracts/Seasons/SCMLRewards.sol:13",
        "version": {
          "withMetadata": "2849f3896b5cf493cead06a0a342e60499e2f8d0dbf3797292d285d2018769f0",
          "withoutMetadata": "ce7532168a0d67eeaad24f65134548226a66f22b4b39d6be1c851e1f9c499e41",
          "linkedWithoutMetadata": "ce7532168a0d67eeaad24f65134548226a66f22b4b39d6be1c851e1f9c499e41"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/ISCMLRewards.sol:ISCMLRewards"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "startLeaderboard(uint256,address[])",
          "endLeaderboard(uint256)",
          "finalize(uint256,uint256[],uint256)",
          "reportRewards(uint256,address[],uint256[][])",
          "claimReward(uint256)",
          "getClaimableReward(uint256)",
          "revokeUnclaimedReward(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCMLRewards",
            "src": "SuperChamps/contracts/Seasons/SCMLRewards.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "memeLeaderboards",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_struct(MemeLeaderboard)24131_storage)dyn_storage",
              "contract": "SCMLRewards",
              "src": "SuperChamps/contracts/Seasons/SCMLRewards.sol:18"
            },
            {
              "label": "leaderboard_rewards",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))",
              "contract": "SCMLRewards",
              "src": "SuperChamps/contracts/Seasons/SCMLRewards.sol:21"
            },
            {
              "label": "claimed_rewards",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))",
              "contract": "SCMLRewards",
              "src": "SuperChamps/contracts/Seasons/SCMLRewards.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MemeLeaderboard)24131_storage)dyn_storage": {
              "label": "struct ISCMLRewards.MemeLeaderboard[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
              "label": "mapping(uint256 => mapping(address => mapping(address => uint256)))",
              "numberOfBytes": "32"
            },
            "t_struct(MemeLeaderboard)24131_storage": {
              "label": "struct ISCMLRewards.MemeLeaderboard",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "start_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "end_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokens",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "reward_amount",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "remaining_reward_amount",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "claim_end_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:SCSeasonRewards": {
        "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:17",
        "version": {
          "withMetadata": "0de89ae072343e4f3eba07ac662b773baa6a37adae00958d3bd82be6184e28d4",
          "withoutMetadata": "fa7142d71d73a16b048e684ba2f0079da8de7e1802f282f5016131250db761c1",
          "linkedWithoutMetadata": "fa7142d71d73a16b048e684ba2f0079da8de7e1802f282f5016131250db761c1"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/ISCSeasonRewards.sol:ISCSeasonRewards"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setTreasury(address)",
          "startSeason(uint256)",
          "isSeasonActive((uint256,uint256,uint256,uint256,uint256,uint256),uint256)",
          "isSeasonFinalized((uint256,uint256,uint256,uint256,uint256,uint256))",
          "isSeasonEnded((uint256,uint256,uint256,uint256,uint256,uint256),uint256)",
          "isSeasonClaimingActive((uint256,uint256,uint256,uint256,uint256,uint256),uint256)",
          "isSeasonClaimingEnded((uint256,uint256,uint256,uint256,uint256,uint256),uint256)",
          "endSeason(uint256)",
          "revokeUnclaimedReward(uint256)",
          "finalize(uint256,uint256,uint256)",
          "reportRewards(uint256,address[],uint256[])",
          "claimReward(uint256)",
          "stakeReward(uint256)",
          "getClaimableReward(uint256)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCSeasonRewards",
            "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "treasury",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:22"
            },
            {
              "label": "access_pass",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(ISCAccessPass)24110",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:25"
            },
            {
              "label": "staking_pool",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ISCMetagamePool)24307",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:28"
            },
            {
              "label": "seasons",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_struct(Season)24369_storage)dyn_storage",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:31"
            },
            {
              "label": "season_rewards",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:34"
            },
            {
              "label": "claimed_rewards",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:37"
            },
            {
              "label": "consumed_signatures",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:41"
            },
            {
              "label": "player_last_signature_timestamp",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SCSeasonRewards",
              "src": "SuperChamps/contracts/Seasons/SCSeasonRewards.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Season)24369_storage)dyn_storage": {
              "label": "struct ISCSeasonRewards.Season[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_memory_ptr": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(ISCAccessPass)24110": {
              "label": "contract ISCAccessPass",
              "numberOfBytes": "20"
            },
            "t_contract(ISCMetagamePool)24307": {
              "label": "contract ISCMetagamePool",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes_memory_ptr,t_bool)": {
              "label": "mapping(bytes => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_struct(Season)24369_storage": {
              "label": "struct ISCSeasonRewards.Season",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "start_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "end_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "reward_amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "remaining_reward_amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "claim_end_time",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:ExponentialVestingEscrow": {
        "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:15",
        "version": {
          "withMetadata": "763d9633ced1eb3eae8de28e3175d0cbc13e3d21f6922e6e0377d923fee1eb1f",
          "withoutMetadata": "e926c12b516000b13aba322bd103fbb716c781b8fde5c1d167af65b1d874a9a1",
          "linkedWithoutMetadata": "e926c12b516000b13aba322bd103fbb716c781b8fde5c1d167af65b1d874a9a1"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "SuperChamps/interfaces/IVestingEscrow.sol:IVestingEscrow"
        ],
        "libraries": [
          "SuperChamps/contracts/Utils/ABDKMath64x64.sol:ABDKMath64x64"
        ],
        "methods": [
          "(address)",
          "initialize(address,address,address,uint256,uint256,uint256,uint256)",
          "unclaimed()",
          "locked()",
          "changeRecipient(address)",
          "claim(address,uint256)",
          "collect_dust(address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ExponentialVestingEscrow",
            "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:61"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "recipient",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:26"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)1263",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:29"
            },
            {
              "label": "start_time",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:32"
            },
            {
              "label": "rate_per_second",
              "offset": 0,
              "slot": "3",
              "type": "t_int128",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:36"
            },
            {
              "label": "total_locked",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:39"
            },
            {
              "label": "total_claimed",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:42"
            },
            {
              "label": "initialized",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:45"
            },
            {
              "label": "_reentrancy_locked",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "ExponentialVestingEscrow",
              "src": "SuperChamps/contracts/Token/ExponentialVestingEscrow.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1263": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Token/SCRewardsDispenser.sol:SCRewardsDispenser": {
        "src": "SuperChamps/contracts/Token/SCRewardsDispenser.sol:16",
        "version": {
          "withMetadata": "7da4e1a437b6a2f6fa744787ebc44517d00959ab5724f841ab70a6afeec8781c",
          "withoutMetadata": "2c0eb686837d7ae3700893c11febb8afc7ab207422874f8ccbb26b4a5cc8b126",
          "linkedWithoutMetadata": "2c0eb686837d7ae3700893c11febb8afc7ab207422874f8ccbb26b4a5cc8b126"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "(address,address)",
          "extractSigner712(uint256,uint256,bytes)",
          "claim((uint256,uint256),bytes)",
          "withdraw()",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCRewardsDispenser",
            "src": "SuperChamps/contracts/Token/SCRewardsDispenser.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "SuperChamps/contracts/Token/SCRewardsDispenser.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "consumed_signatures",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes_memory_ptr,t_bool)",
              "contract": "SCRewardsDispenser",
              "src": "SuperChamps/contracts/Token/SCRewardsDispenser.sol:29"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_memory_ptr": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes_memory_ptr,t_bool)": {
              "label": "mapping(bytes => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Token/SCShop.sol:SCShop": {
        "src": "SuperChamps/contracts/Token/SCShop.sol:15",
        "version": {
          "withMetadata": "dffab17f9109806758047ca1e9c9ae3d0c8ee11759dbaab6a6610a997f070e54",
          "withoutMetadata": "f05a4c4b3d9abc38692f26c401185cbcdcc46fa7baa4dd873a1edd9e8947c946",
          "linkedWithoutMetadata": "f05a4c4b3d9abc38692f26c401185cbcdcc46fa7baa4dd873a1edd9e8947c946"
        },
        "inherit": [
          "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "saleTransaction(address,address,uint256,string,string)",
          "nftChampTrade(address,address,uint256,address,uint256,string,bytes)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCShop",
            "src": "SuperChamps/contracts/Token/SCShop.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "SuperChamps/contracts/Token/SCShop.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Token/SuperChampsToken.sol:SuperChampsToken": {
        "src": "SuperChamps/contracts/Token/SuperChampsToken.sol:14",
        "version": {
          "withMetadata": "54a325bae636dfb4993deabd10494ba65b9942c5cb055a64fc2ef5c46ae76b2b",
          "withoutMetadata": "17933e4c0100e7a399b1adf4f1402fbcb5f185d67986dd6e68d7525255c169b1",
          "linkedWithoutMetadata": "17933e4c0100e7a399b1adf4f1402fbcb5f185d67986dd6e68d7525255c169b1"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "tokenGenerationEvent(address[],uint256[])",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "unlockTransfers()",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SuperChampsToken",
            "src": "SuperChamps/contracts/Token/SuperChampsToken.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "permissions",
            "src": "SuperChamps/contracts/Token/SuperChampsToken.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TOTAL_SUPPLY",
            "src": "SuperChamps/contracts/Token/SuperChampsToken.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "transfersLocked",
              "offset": 0,
              "slot": "8",
              "type": "t_bool",
              "contract": "SuperChampsToken",
              "src": "SuperChamps/contracts/Token/SuperChampsToken.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Utils/ABDKMath64x64.sol:ABDKMath64x64": {
        "src": "SuperChamps/contracts/Utils/ABDKMath64x64.sol:16",
        "version": {
          "withMetadata": "c70c801d8560877a5536cd7926ac9afa295c45fcb12eff4e96fc1668dad74d32",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Utils/DeployGnosisProxies.sol:DeployGnosisProxies": {
        "src": "SuperChamps/contracts/Utils/DeployGnosisProxies.sol:11",
        "version": {
          "withMetadata": "120ecfe96a328951bc6742d3a2d8a0b5f9f960f9de32a82f1d546e7ec3457d62",
          "withoutMetadata": "98dcad1a36c4f06d87f24008667bc7f9b724d9bad45efc865cc195c0be73a0bf",
          "linkedWithoutMetadata": "98dcad1a36c4f06d87f24008667bc7f9b724d9bad45efc865cc195c0be73a0bf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createSafes(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "FACTORY",
            "src": "SuperChamps/contracts/Utils/DeployGnosisProxies.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "FACTORY",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IGnosisSafeProxyFactory)12798",
              "contract": "DeployGnosisProxies",
              "src": "SuperChamps/contracts/Utils/DeployGnosisProxies.sol:12"
            }
          ],
          "types": {
            "t_contract(IGnosisSafeProxyFactory)12798": {
              "label": "contract IGnosisSafeProxyFactory",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Utils/DeploymentProxy.sol:CreateCall": {
        "src": "SuperChamps/contracts/Utils/DeploymentProxy.sol:10",
        "version": {
          "withMetadata": "6c2bcb1cb8ae83035d837e18b28317ad03d9f8b5e2b8e65d0fcadf68f0423319",
          "withoutMetadata": "d81bc9e17c1dc3883174146d30ac86a0bbdfe19911e3ed6eccc57b26f7b9c261",
          "linkedWithoutMetadata": "d81bc9e17c1dc3883174146d30ac86a0bbdfe19911e3ed6eccc57b26f7b9c261"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "performCreate2(uint256,bytes,bytes32)",
          "performCreate(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Utils/PermissionsManager.sol:PermissionsManager": {
        "src": "SuperChamps/contracts/Utils/PermissionsManager.sol:13",
        "version": {
          "withMetadata": "d15227f6f94c415eac631b8afe4a5ab632def181f144095df7f5f88a240613ee",
          "withoutMetadata": "79f76c519497d8463d82f4200534a3aac1ca1f3493def267173ee828ab32b13d",
          "linkedWithoutMetadata": "79f76c519497d8463d82f4200534a3aac1ca1f3493def267173ee828ab32b13d"
        },
        "inherit": [
          "SuperChamps/interfaces/IPermissionsManager.sol:IPermissionsManager"
        ],
        "libraries": [],
        "methods": [
          "()",
          "hasRole(uint8,address)",
          "addRole(uint8,address)",
          "removeRole(uint8,address)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PermissionsManager",
            "src": "SuperChamps/contracts/Utils/PermissionsManager.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "role_mapping",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_enum(Role)24044,t_bool))",
              "contract": "PermissionsManager",
              "src": "SuperChamps/contracts/Utils/PermissionsManager.sol:15"
            },
            {
              "label": "role_count",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PermissionsManager",
              "src": "SuperChamps/contracts/Utils/PermissionsManager.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(Role)24044": {
              "label": "enum IPermissionsManager.Role",
              "members": [
                "ANY",
                "GLOBAL_ADMIN",
                "MINT_ADMIN",
                "TRANSFER_ADMIN",
                "SYSTEMS_ADMIN",
                "EXT1",
                "EXT2",
                "EXT3",
                "EXT4",
                "EXT5",
                "EXT6",
                "EXT7",
                "EXT8",
                "EXT9",
                "EXT10"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Role)24044,t_bool))": {
              "label": "mapping(address => mapping(enum IPermissionsManager.Role => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Role)24044,t_bool)": {
              "label": "mapping(enum IPermissionsManager.Role => bool)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Utils/SCDeploymentHelper.sol:SCDeploymentHelper": {
        "src": "SuperChamps/contracts/Utils/SCDeploymentHelper.sol:15",
        "version": {
          "withMetadata": "0ce6f4f12444798c2bf97cffbf19fb292cc8b263c9f71c9cd5d992ff4d3ac70e",
          "withoutMetadata": "2355c794d2de39101828351c1a5fc65a299a3ca2fd84dfe637e7b07b3015cc5f",
          "linkedWithoutMetadata": "2355c794d2de39101828351c1a5fc65a299a3ca2fd84dfe637e7b07b3015cc5f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getERC20Address()",
          "getPermissionManagerAddress()",
          "initializeEmmissions(address,uint256,uint256)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCDeploymentHelper",
            "src": "SuperChamps/contracts/Utils/SCDeploymentHelper.sol:48"
          },
          {
            "kind": "state-variable-immutable",
            "name": "permissions",
            "src": "SuperChamps/contracts/Utils/SCDeploymentHelper.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SuperChampsToken)20415",
              "contract": "SCDeploymentHelper",
              "src": "SuperChamps/contracts/Utils/SCDeploymentHelper.sol:20"
            }
          ],
          "types": {
            "t_contract(SuperChampsToken)20415": {
              "label": "contract SuperChampsToken",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:SCPermissionedAccess": {
        "src": "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:8",
        "version": {
          "withMetadata": "b9ba08dc8fc27b989366d6bb21bdfdc1162672d3c33fa1d37341402bcdf71326",
          "withoutMetadata": "a9707cd977e29fc647c62ba6f09d6c03d9d18c7239f627e25aa65b7a694ec2de",
          "linkedWithoutMetadata": "a9707cd977e29fc647c62ba6f09d6c03d9d18c7239f627e25aa65b7a694ec2de"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SCPermissionedAccess",
            "src": "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "permissions",
            "src": "SuperChamps/contracts/Utils/SCPermissionedAccess.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/interfaces/IERC721MetadataRenderer.sol:IERC721MetadataRenderer": {
        "src": "SuperChamps/interfaces/IERC721MetadataRenderer.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "tokenURI(uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/interfaces/IPermissionsManager.sol:IPermissionsManager": {
        "src": "SuperChamps/interfaces/IPermissionsManager.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(uint8,address)",
          "addRole(uint8,address)",
          "removeRole(uint8,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/interfaces/ISCAccessPass.sol:ISCAccessPass": {
        "src": "SuperChamps/interfaces/ISCAccessPass.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPassHolder(address)",
          "isVerified(address)",
          "getLevel(address)",
          "getLevel(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/interfaces/ISCMLRewards.sol:ISCMLRewards": {
        "src": "SuperChamps/interfaces/ISCMLRewards.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "startLeaderboard(uint256,address[])",
          "endLeaderboard(uint256)",
          "finalize(uint256,uint256[],uint256)",
          "reportRewards(uint256,address[],uint256[][])",
          "claimReward(uint256)",
          "getClaimableReward(uint256)",
          "revokeUnclaimedReward(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/interfaces/ISCMetagameDataSource.sol:ISCMetagameDataSource": {
        "src": "SuperChamps/interfaces/ISCMetagameDataSource.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMultiplier(address,string)",
          "getMembership(address,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/interfaces/ISCMetagamePool.sol:ISCMetagamePool": {
        "src": "SuperChamps/interfaces/ISCMetagamePool.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(uint256)",
          "stakeFor(address,uint256)",
          "approve(address,uint256)",
          "spend(uint256,address,address,string)",
          "unstake(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/interfaces/ISCMetagameRegistry.sol:ISCMetagameRegistry": {
        "src": "SuperChamps/interfaces/ISCMetagameRegistry.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "metadataFromAddress(address,string)",
          "metadataFromUserID(string,string)",
          "addressToUserID(address)",
          "registerUserInfo(string,address,string,string,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/interfaces/ISCSeasonRewards.sol:ISCSeasonRewards": {
        "src": "SuperChamps/interfaces/ISCSeasonRewards.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "startSeason(uint256)",
          "endSeason(uint256)",
          "finalize(uint256,uint256,uint256)",
          "reportRewards(uint256,address[],uint256[])",
          "claimReward(uint256)",
          "getClaimableReward(uint256)",
          "revokeUnclaimedReward(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/interfaces/ISuperChampsToken.sol:ISuperChampsToken": {
        "src": "SuperChamps/interfaces/ISuperChampsToken.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permissions()",
          "transfersLocked()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "SuperChamps/interfaces/IVestingEscrow.sol:IVestingEscrow": {
        "src": "SuperChamps/interfaces/IVestingEscrow.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256)",
          "unclaimed()",
          "locked()",
          "claim(address,uint256)",
          "collect_dust(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "Synthetix/contracts/Owned.sol:Owned": {
        "src": "Synthetix/contracts/Owned.sol:7",
        "version": {
          "withMetadata": "38c539feb8acc2527e3de5cd4d17ccd2bb3494d083d8001eb688c1eac7d152ae",
          "withoutMetadata": "f12173e43cc04795815e6a33f479784e5622207a6cdbef0c3c35f8827d1a31ed",
          "linkedWithoutMetadata": "f12173e43cc04795815e6a33f479784e5622207a6cdbef0c3c35f8827d1a31ed"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "Synthetix/contracts/Owned.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:8"
            },
            {
              "label": "nominatedOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "Synthetix/contracts/Pausable.sol:Pausable": {
        "src": "Synthetix/contracts/Pausable.sol:10",
        "inherit": [
          "Synthetix/contracts/Owned.sol:Owned"
        ],
        "libraries": [],
        "methods": [
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "Synthetix/contracts/Pausable.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:8"
            },
            {
              "label": "nominatedOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:9"
            },
            {
              "label": "lastPauseTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:11"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "Synthetix/contracts/RewardsDistributionRecipient.sol:RewardsDistributionRecipient": {
        "src": "Synthetix/contracts/RewardsDistributionRecipient.sol:10",
        "version": {
          "withMetadata": "44dd30a01913f7ce0b2b260d2427a13c4162dc29885f42fe1652a3ced59f7f76",
          "withoutMetadata": "fc4c73dfea6a763657ce9e41516945a642e44de669f1bb42b62dfc726e3b6581",
          "linkedWithoutMetadata": "fc4c73dfea6a763657ce9e41516945a642e44de669f1bb42b62dfc726e3b6581"
        },
        "inherit": [
          "Synthetix/contracts/Owned.sol:Owned"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "(address)",
          "setRewardsDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardsDistributionRecipient",
            "src": "Synthetix/contracts/RewardsDistributionRecipient.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:8"
            },
            {
              "label": "nominatedOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:9"
            },
            {
              "label": "rewardsDistribution",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "RewardsDistributionRecipient",
              "src": "Synthetix/contracts/RewardsDistributionRecipient.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "Synthetix/contracts/StakingRewards.sol:StakingRewards": {
        "src": "Synthetix/contracts/StakingRewards.sol:15",
        "version": {
          "withMetadata": "818bfbc9aabd4028afc1b57557a4f059c99226a748715de83127a40ba3753b88",
          "withoutMetadata": "a65610f001d8a169ab8d90ca1c0c13621d23360f050a4664c3a5e2d091a6b4a5",
          "linkedWithoutMetadata": "a65610f001d8a169ab8d90ca1c0c13621d23360f050a4664c3a5e2d091a6b4a5"
        },
        "inherit": [
          "Synthetix/contracts/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "Synthetix/contracts/RewardsDistributionRecipient.sol:RewardsDistributionRecipient",
          "Synthetix/contracts/Owned.sol:Owned",
          "Synthetix/contracts/interfaces/IStakingRewards.sol:IStakingRewards"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "totalSupply()",
          "balanceOf(address)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "getRewardForDuration()",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "notifyRewardAmount(uint256)",
          "recoverERC20(address,uint256)",
          "setRewardsDuration(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakingRewards",
            "src": "Synthetix/contracts/StakingRewards.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "Synthetix/contracts/StakingRewards.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "Synthetix/contracts/StakingRewards.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardsDuration",
            "src": "Synthetix/contracts/StakingRewards.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:8"
            },
            {
              "label": "nominatedOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "Synthetix/contracts/Owned.sol:9"
            },
            {
              "label": "rewardsDistribution",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "RewardsDistributionRecipient",
              "src": "Synthetix/contracts/RewardsDistributionRecipient.sol:11"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "lastPauseTime",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:11"
            },
            {
              "label": "paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "Synthetix/contracts/Pausable.sol:12"
            },
            {
              "label": "rewardsToken",
              "offset": 1,
              "slot": "5",
              "type": "t_contract(IERC20)1263",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:18"
            },
            {
              "label": "stakingToken",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IERC20)1263",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:19"
            },
            {
              "label": "periodFinish",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:20"
            },
            {
              "label": "rewardRate",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:21"
            },
            {
              "label": "rewardsDuration",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:22"
            },
            {
              "label": "lastUpdateTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:23"
            },
            {
              "label": "rewardPerTokenStored",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:24"
            },
            {
              "label": "userRewardPerTokenPaid",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:26"
            },
            {
              "label": "rewards",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:27"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "StakingRewards",
              "src": "Synthetix/contracts/StakingRewards.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1263": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      },
      "Synthetix/contracts/interfaces/IStakingRewards.sol:IStakingRewards": {
        "src": "Synthetix/contracts/interfaces/IStakingRewards.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "earned(address)",
          "getRewardForDuration()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "rewardsToken()",
          "totalSupply()",
          "exit()",
          "getReward()",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.30"
      }
    }
  ]
}